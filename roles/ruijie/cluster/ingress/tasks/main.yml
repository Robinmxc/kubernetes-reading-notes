- name: 获取已下载离线镜像信息
  command: "ls {{ base_dir }}/down"
  register: download_info
  connection: local
  run_once: true

- name: 获取所有已经创建的POD信息
  command: "{{ bin_dir }}/kubectl get pod --all-namespaces"
  register: pod_info
  run_once: true
  delegate_to: "{{ groups.deploy[0] }}"

- name: 部署ingress
  when: '"nginx-ingress" not in pod_info.stdout'
  block:
    - name: 尝试推送离线 nginx镜像（若执行失败，可忽略）
      copy: src={{ base_dir }}/down/{{ nginx_offline }} dest=/opt/kube/images/{{ nginx_offline }}
      when: 'nginx_offline in download_info.stdout'

    - name: 获取nginx离线镜像推送情况
      command: "ls /opt/kube/images"
      register: image_info

    - name: 导入 nginx的离线镜像（若执行失败，可忽略）
      shell: "{{ bin_dir }}/docker load -i /opt/kube/images/{{ nginx_offline }}"
      when: 'nginx_offline in image_info.stdout'

    - name: 在master导入 nginx的离线镜像（若执行失败，可忽略）
      shell: "{{ bin_dir }}/docker load -i {{ base_dir }}/down/{{ nginx_offline }}"
      when: 'nginx_offline in download_info.stdout'
      delegate_to: "{{ groups.deploy[0] }}"
      run_once: true

    - name: 在deploy 节点创建相关目录
      file: path={{ item }} state=directory
      with_items:
      - "{{ nginx_temp_dir }}"
      run_once: true
      delegate_to: "{{ groups.deploy[0] }}"

    - name: 复制nginx部署文件
      copy: src={{ item }} dest={{ nginx_temp_dir }}/{{ item }}
      with_items:
        - nginx-rbac.yaml
        - nginx.tmpl
      run_once: true
      delegate_to: "{{ groups.deploy[0] }}"

    - name: 创建nginx部署文件
      template: src=nginx-ingress.yaml.j2 dest={{ nginx_temp_dir }}/nginx-ingress.yaml
      run_once: true
      delegate_to: "{{ groups.deploy[0] }}"

    - name: 获取configmap数据
      command: "{{ bin_dir }}/kubectl -n kube-system get configmap"
      register: nginx_config
      connection: local
      run_once: true

    - name: 创建 nginx 模板文件的 configmap
      shell: "{{ bin_dir }}/kubectl -n kube-system create configmap nginx-template --from-file={{ nginx_temp_dir }}/nginx.tmpl"
      when: '"nginx-template" not in nginx_config.stdout'
      connection: local
      run_once: true
  
    - name: 获取secret数据
      command: "{{ bin_dir }}/kubectl get secret -n {{ APP_NAMESPACE }}"
      register: secret_info
      connection: local
      run_once: true
      when: "'https' == ingress_mode"

    - name: 删除旧的证书
      command: "{{ bin_dir }}/kubectl delete secret nginx-cert -n {{ APP_NAMESPACE }}"
      connection: local
      run_once: true
      when: "'https' == ingress_mode and 'nginx-cert' in secret_info.stdout"

    - name: 保存证书到k8s
      vars:
        - ssl_files: "{% for f in ingress_ssl_names %} --cert={{ ingress_ca_dir }}/{{ f }}.pem --key={{ ingress_ca_dir }}/{{ f }}-key.pem {% endfor %}"
      shell: "{{ bin_dir }}/kubectl create secret tls nginx-cert {{ ssl_files }} -n {{ APP_NAMESPACE }}"
      run_once: true
      connection: local
      when: "'https' == ingress_mode"

    - name: 部署nginx-rbac
      shell: "{{ bin_dir }}/kubectl apply -f {{ nginx_temp_dir }}/nginx-rbac.yaml"
      connection: local
      run_once: true
      
    - name: 部署nginx
      shell: "{{ bin_dir }}/kubectl apply -f {{ nginx_temp_dir }}/nginx-ingress.yaml"
      connection: local
      run_once: true
