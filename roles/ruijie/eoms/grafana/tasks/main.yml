- name: 获取prometheus安装状态
  stat: 
    path: /usr/lib/systemd/system/prometheus.service
  register: prometheus_result

- name: 部署prometheus
  when: 'not prometheus_result.stat.exists'
  block:
  - name: 准备目录
    file: name={{ item }} state=directory
    with_items:
    - "{{ DATA_DIR }}/prometheus"

  - name: 解压 prometheus 安装包
    shell: "tar -zxvf {{ DEST_FILE_PATH }}/{{ grafana_prometheus_file }} -C {{ DATA_DIR }}/prometheus >/dev/null"

  - name: 准备配置文件
    tags:
      - config
    vars:
      influxdb_host: '{{ groups.influxdb[0] }}'
    template: src='prometheus.yml.j2' dest={{ DATA_DIR }}/prometheus/prometheus.yml

  - name: 准备 prometheus service 配置文件
    tags:
      - config
    vars:
      influxdb_host: '{{ groups.influxdb[0] }}'
    template: src='prometheus.service.j2' dest=/usr/lib/systemd/system/prometheus.service

- name: 开机启用 prometheus 服务
  tags:
    - config
  shell: systemctl enable prometheus.service
  ignore_errors: true

- name: 开启 prometheus 服务
  tags:
    - config
  shell: systemctl daemon-reload && systemctl restart prometheus.service

- name: 等待 prometheus 启动完成
  shell: "systemctl status prometheus.service|grep Active"
  register: prometheus_status
  until: '"running" in prometheus_status.stdout'
  retries: 8
  delay: 2
  
- name: 获取grafana安装状态
  stat: 
    path: /usr/lib/systemd/system/grafana-server.service
  register: grafana_result

- name: 部署grafana
  when: 'not grafana_result.stat.exists'
  block:
  - name: 准备目录
    file: name={{ item }} state=directory
    with_items:
    - "{{ DATA_DIR }}/grafana"
    - "/var/lib/grafana/plugins"

  - name: 安装grafana
    yum: name={{ DEST_FILE_PATH }}/{{ grafana_file }} disable_gpg_check=Yes state=present

  - name: 解压 grafana 插件
    shell: "tar -zxvf {{ DEST_FILE_PATH }}/{{ grafana_plugin_file }} -C /var/lib/grafana/plugins >/dev/null"

- name: 开机启用grafana 服务
  tags:
    - config
  shell: systemctl enable grafana-server
  ignore_errors: true

- name: 开启 grafana 服务
  tags:
    - config
  shell: systemctl daemon-reload && systemctl restart grafana-server

- name: 重启 grafana 服务
  tags:
    - config
  shell: systemctl daemon-reload && systemctl restart grafana-server

- name: 等待grafana启动完成
  shell: "systemctl status grafana-server.service|grep Active"
  register: grafana_status
  until: '"running" in grafana_status.stdout'
  retries: 8
  delay: 2