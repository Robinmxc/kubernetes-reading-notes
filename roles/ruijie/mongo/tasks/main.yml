- name: 获取数据存储路径状态
  tags:
  - config
  stat: path="{{ mongodb_data_dir }}"
  register: data_dir_stat
  when: 'mongodb_check_data_dir == "yes"'

- name: 检查数据存储路径是否存在
  tags:
  - config
  fail: msg="数据存储目录{{ mongodb_data_dir }}不存在"
  when: 'mongodb_check_data_dir == "yes" and not data_dir_stat.stat.exists
     and ( mongodb_deploy_mode == 3 or inventory_hostname == groups.mongodb[0] )'

- name: 准备init目录
  tags:
  - config
  file: path="{{ mongodb_init_dir }}" state=directory
  when: '"" != mongodb_init_dir'

- name: 在deploy节点准备目录
  tags:
  - config
  file: path={{ item }} state=directory
  with_items:
  - "{{ yaml_dir }}/mongo"
  run_once: true
  connection: local

- name: 检查keyfile
  tags:
  - config
  command: "{{ bin_dir }}/kubectl get secret -n {{ APP_NAMESPACE }}"
  when: 'mongodb_auth_mode == "yes"'
  register: secret_info
  connection: local
  run_once: true

- name:
  tags:
  - config
  block:
  - name: 生成随机key
    shell: "openssl rand -hex 32"
    register: ssl_result
  - name: 准备keyfile部署文件
    vars:
      mongo_key: "{{ ssl_result.stdout }}"
    template: src=keyfile.yaml.j2 dest={{ yaml_dir }}/mongo/keyfile.yml
  - name: 创建keyfile
    shell: "{{ bin_dir }}/kubectl apply -f {{ yaml_dir }}/mongo/keyfile.yml"
  when: 'mongodb_auth_mode == "yes" and "mongo-key" not in secret_info.stdout'
  connection: local
  run_once: true


- name: 检查configmap
  tags:
  - config
  command: "{{ bin_dir }}/kubectl get configmap -n {{ APP_NAMESPACE }}"
  register: configmap_info
  connection: local
  run_once: true

- name:
  tags:
  - config
  block:
  - name: 准备configmap部署文件
    vars:
      mongo_auth_param: "{% if mongodb_auth_mode == 'yes' %}-u {{ MONGODB_ADMIN_USER }} -p {{ MONGODB_ADMIN_PWD }} --authenticationDatabase admin{% else %}{% endif %}"
    template: src=mongo-conf.yaml.j2 dest={{ yaml_dir }}/mongo/mongo-conf.yml
  - name: 创建configmap
    shell: "{{ bin_dir }}/kubectl apply -f {{ yaml_dir }}/mongo/mongo-conf.yml"
  when: '"mongo-conf" not in configmap_info.stdout'
  connection: local
  run_once: true

- name: 检查数据库账号是否符合要求
  tags:
  - config
  fail: msg="数据库管理员账号不符合要求，{{ db_user_invalid_msg }}"
  when: 'mongodb_auth_mode == "yes" and MONGODB_ADMIN_USER is not search(db_user_pattern)'
  connection: local
  run_once: true

- name: 检查数据库密码是否符合要求
  tags:
  - config
  fail: msg="数据库管理员密码不符合要求，{{ db_pwd_invalid_msg }}"
  when: 'mongodb_auth_mode == "yes" and ( MONGODB_ADMIN_PWD is not search(db_pwd_pattern1) or MONGODB_ADMIN_PWD is not search(db_pwd_pattern2) )'
  connection: local
  run_once: true

- name: 准备第1个mongodb的部署文件
  tags:
  - config
  vars:
    mongodb_node_name: "mongo1"
    mongodb_node_ip: "{{ groups.mongodb[0] }}"
    liveness_probe_sh_config_key: "liveness-probe-sh"
  template: src=mongo.yaml.j2 dest={{ yaml_dir }}/mongo/mongo1.yml
  run_once: true
  connection: local

- name: 准备第2个mongodb的部署文件
  tags:
  - config
  vars:
    mongodb_node_name: "mongo2"
    mongodb_node_ip: "{{ groups.mongodb[1] }}"
    liveness_probe_sh_config_key: "liveness-probe-sh"
  template: src=mongo.yaml.j2 dest={{ yaml_dir }}/mongo/mongo2.yml
  run_once: true
  connection: local
  when: "mongodb_deploy_mode == 3"

- name: 准备第3个mongodb的部署文件
  tags:
  - config
  vars:
    mongodb_node_name: "mongo3"
    mongodb_node_ip: "{{ groups.mongodb[2] }}"
    liveness_probe_sh_config_key: "liveness-probe-sh-noauth"
  template: src=mongo.yaml.j2 dest={{ yaml_dir }}/mongo/mongo3.yml
  run_once: true
  connection: local
  when: "mongodb_deploy_mode == 3"


- name: 获取已下载离线镜像信息
  command: "ls {{ base_dir }}/down"
  register: download_info
  connection: local
  run_once: true

- name: 获取所有已经创建的POD信息
  command: "{{ bin_dir }}/kubectl get pod -n {{ APP_NAMESPACE }}"
  register: pod_info
  run_once: true
  connection: local

- block:
    - name: 分发镜像文件
      copy: src={{ base_dir }}/down/{{ mongodb_offline }} dest=/opt/kube/images/{{ mongodb_offline }}
      when: 'mongodb_offline in download_info.stdout'

    - name: 获取镜像文件分发情况
      command: "ls /opt/kube/images"
      register: image_info

    - name: 导入镜像
      shell: "{{ bin_dir }}/docker load -i /opt/kube/images/{{ mongodb_offline }}"
      when: 'mongodb_offline in image_info.stdout'

    - name: 部署第1个mongodb
      shell: "{{ bin_dir }}/kubectl apply -f {{ yaml_dir }}/mongo/mongo1.yml"
      connection: local
      run_once: true

    - name: 部署第2个mongodb
      shell: "{{ bin_dir }}/kubectl apply -f {{ yaml_dir }}/mongo/mongo2.yml"
      connection: local
      run_once: true
      when: "mongodb_deploy_mode == 3"

    - name: 部署第3个mongodb
      shell: "{{ bin_dir }}/kubectl apply -f {{ yaml_dir }}/mongo/mongo3.yml"
      connection: local
      run_once: true
      when: "mongodb_deploy_mode == 3"

    - name: 轮询等待mongodb运行
      shell: "{{ bin_dir }}/kubectl get pod -n {{ APP_NAMESPACE }} | grep 'mongo1' | awk '{print $3}'"
      register: pod_status
      until: pod_status.stdout == "Running"
      connection: local
      run_once: true
      retries: 12
      delay: 5
      ignore_errors: true

    - name: 获取mongo1 POD 名称
      shell: "{{ bin_dir }}/kubectl get pod -n {{ APP_NAMESPACE }} -o custom-columns=NAME:.metadata.name | grep mongo1"
      register: pod_name
      connection: local
      run_once: true

    - name: set vars
      set_fact:
        pod_shell: "{{ bin_dir }}/kubectl exec -n {{ APP_NAMESPACE }} {{ pod_name.stdout }} -- "
      connection: local
      run_once: true

    - import_tasks: init_repl_set.yml

    - name: 创建数据库管理员账号
      shell: '{{ pod_shell }} mongo --eval ''db.getSiblingDB("admin").runCommand({createUser: "{{ MONGODB_ADMIN_USER }}",pwd: "{{ MONGODB_ADMIN_PWD }}",roles: [{role:"root", db: "admin"}]})'''
      when: 'mongodb_auth_mode == "yes"'
      register: mongo_result
      failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
      connection: local
      run_once: true
      no_log: true

  when: '"mongo" not in pod_info.stdout'

