- name: 获取数据存储路径状态
  tags:
  - config
  stat: path="{{ mongodb_data_dir }}"
  register: data_dir_stat
  when: 'mongodb_check_data_dir == "yes"'

- name: 检查数据存储路径是否存在
  tags:
  - config
  fail: msg="数据存储目录{{ mongodb_data_dir }}不存在"
  when: 'mongodb_check_data_dir == "yes" and not data_dir_stat.stat.exists
     and ( mongodb_deploy_mode == "3" or inventory_hostname == groups.mongodb[0] )'

- name: 获取数据存储目录的容量
  tags:
  - config
  vars:
    pattern: "^{{ item.mount }}.*$"
  set_fact: data_dir_mount_info='{{ item }}'
  when: 'mongodb_data_dir is search(pattern)'
  with_items: '{{ hostvars[inventory_hostname].ansible_mounts | sort(attribute="mount") | list }}'

- name: 创建/etc/kad目录
  file: path="/etc/kad/" state=directory

- name: 创建/etc/kad/config.yml文件
  file: path="/etc/kad/config.yml" state=touch

- name: 将数据目录写入/etc/kad/config.yml
  template: src=config.yml.j2 dest=/etc/kad/config.yml

- name: 将数据目录写入/etc/kad/config.yml
  template: src=config.yml.j2 dest=/etc/kad/config.yml
  connection: local

- name: 准备init目录
  tags:
  - config
  file: path="{{ mongodb_init_dir }}" state=directory
  when: '"" != mongodb_init_dir'

- name: 在deploy节点准备目录
  tags:
  - config
  file: path={{ item }} state=directory
  with_items:
  - "{{ yaml_dir }}/mongo"
  run_once: true
  connection: local

- name: 检查keyfile
  tags:
  - config
  command: "kubectl get secret -n {{ APP_NAMESPACE }}"
  when: 'mongodb_auth_mode == "yes"'
  register: secret_info
  connection: local
  run_once: true

- name:
  tags:
  - config
  block:
  - name: 生成随机key
    shell: "openssl rand -hex 32"
    register: ssl_result
  - name: 准备keyfile部署文件
    vars:
      mongo_key: "{{ ssl_result.stdout }}"
    template: src=keyfile.yaml.j2 dest={{ yaml_dir }}/mongo/keyfile.yml
  - name: 创建keyfile
    shell: "kubectl apply -f {{ yaml_dir }}/mongo/keyfile.yml"
  when: 'mongodb_auth_mode == "yes" and "mongo-key" not in secret_info.stdout'
  connection: local
  run_once: true

- name:
  tags:
  - config
  block:
  - name: 准备configmap部署文件
    template: src=mongo-conf.yaml.j2 dest={{ yaml_dir }}/mongo/mongo-conf.yml
  - name: 创建configmap
    shell: "kubectl apply -f {{ yaml_dir }}/mongo/mongo-conf.yml"
  connection: local
  run_once: true

- name: 检查数据库账号是否符合要求
  tags:
  - config
  fail: msg="数据库管理员账号不符合要求，{{ db_user_invalid_msg }}"
  when: 'mongodb_auth_mode == "yes" and MONGODB_ADMIN_USER is not search(db_user_pattern)'
  connection: local
  run_once: true

- name: 检查数据库密码是否符合要求
  tags:
  - config
  fail: msg="数据库管理员密码不符合要求，{{ db_pwd_invalid_msg }}"
  when: 'mongodb_auth_mode == "yes" and ( MONGODB_ADMIN_PWD is not search(db_pwd_pattern1) or MONGODB_ADMIN_PWD is not search(db_pwd_pattern2) )'
  connection: local
  run_once: true

- name: 检查数据库只读账号密码是否符合要求
  tags:
  - config
  fail: msg="数据库只读账号密码不符合要求，{{ db_pwd_invalid_msg }}"
  when: 'mongodb_auth_mode == "yes" and ( MONGODB_READONLY_PWD is not search(db_pwd_pattern1) or MONGODB_READONLY_PWD is not search(db_pwd_pattern2) )'
  connection: local
  run_once: true

- name: 准备第1个mongodb的部署文件
  tags:
  - config
  vars:
    mongodb_node_name: "{{ hostvars[groups.mongodb[0]]['MONGO_NODE_NAME'] }}"
    mongodb_node_ip: "{{ groups.mongodb[0] }}"
    liveness_probe_sh_config_key: "liveness-probe-sh"
    deploy_conf: '{{ mongodb_1_deploy_conf | default(mongodb_deploy_conf) }}'
  template: src=mongo.yaml.j2 dest={{ yaml_dir }}/mongo/mongo1.yml
  run_once: true
  connection: local

- name: 准备第2个mongodb的部署文件
  tags:
  - config
  vars:
    mongodb_node_name: "{{ hostvars[groups.mongodb[1]]['MONGO_NODE_NAME'] }}"
    mongodb_node_ip: "{{ groups.mongodb[1] }}"
    liveness_probe_sh_config_key: "liveness-probe-sh"
    deploy_conf: '{{ mongodb_deploy_conf }}'
  template: src=mongo.yaml.j2 dest={{ yaml_dir }}/mongo/mongo2.yml
  run_once: true
  connection: local
  when: 'mongodb_deploy_mode == "3"'

- name: 准备第3个mongodb的部署文件-{{mongdb_cluster_mode}}
  tags:
  - config
  vars:
    mongodb_node_name: "{{ hostvars[groups.mongodb[2]]['MONGO_NODE_NAME'] }}"
    mongodb_node_ip: "{{ groups.mongodb[2] }}"
    liveness_probe_sh_config_key: "liveness-probe-sh-noauth"
    deploy_conf: '{{ mongodb_3_deploy_conf }}'
  template: src=mongo.yaml.j2 dest={{ yaml_dir }}/mongo/mongo3.yml
  run_once: true
  connection: local
  when: 'mongodb_deploy_mode == "3" and mongdb_cluster_mode != "pss"'

- name: 准备第3个mongodb的部署文件-{{mongdb_cluster_mode}}
  tags:
  - config
  vars:
    mongodb_node_name: "{{ hostvars[groups.mongodb[2]]['MONGO_NODE_NAME'] }}"
    mongodb_node_ip: "{{ groups.mongodb[2] }}"
    liveness_probe_sh_config_key: "liveness-probe-sh-noauth"
    deploy_conf: '{{ mongodb_deploy_conf }}'
  template: src=mongo.yaml.j2 dest={{ yaml_dir }}/mongo/mongo3.yml
  run_once: true
  connection: local
  when: 'mongodb_deploy_mode == "3" and mongdb_cluster_mode == "pss"'

- name: 获取已下载离线镜像信息
  command: "ls {{ base_dir }}/down"
  register: download_info
  connection: local
  run_once: true

- name: 获取所有已经创建的POD信息
  command: "kubectl get pod -n {{ APP_NAMESPACE }}"
  register: pod_info
  run_once: true
  connection: local

- name: 部署mongodb
  when: '"mongo" not in pod_info.stdout'
  block:
    - name: 分发镜像文件
      copy: src={{ base_dir }}/down/{{ mongodb_offline }} dest=/opt/kube/images/{{ mongodb_offline }}
      when: '"allinone" != DEPLOY_MODE and mongodb_offline in download_info.stdout'

    - name: 获取docker已加载的镜像信息
      command: "docker images --format ''{{ '{{' }}.Repository{{ '}}' }}:{{ '{{' }}.Tag{{ '}}' }}''"
      register: imgages_info

    - name: 导入镜像
      when: 'mongoversion not in imgages_info.stdout'
      vars:
        img_dir: '{% if "allinone" == DEPLOY_MODE %}{{ img_download_dir }}{% else %}{{ img_copy_dir }}{% endif %}'
        mongoversion: "mongo:{{ mongodb_version }}"
      shell: "docker load -i {{ img_dir }}/{{ mongodb_offline }}"

    - name: 部署第1个mongodb
      shell: "kubectl apply -f {{ yaml_dir }}/mongo/mongo1.yml"
      connection: local
      run_once: true

    - name: 部署第2个mongodb
      shell: "kubectl apply -f {{ yaml_dir }}/mongo/mongo2.yml"
      connection: local
      run_once: true
      when: 'mongodb_deploy_mode == "3"'

    - name: 部署第3个mongodb
      shell: "kubectl apply -f {{ yaml_dir }}/mongo/mongo3.yml"
      connection: local
      run_once: true
      when: 'mongodb_deploy_mode == "3"'

    - name: 轮询等待mongodb运行
      shell: "kubectl get pod -n {{ APP_NAMESPACE }} | grep 'mongo1' | awk '{print $3}'"
      register: pod_status
      until: pod_status.stdout == "Running"
      connection: local
      run_once: true
      retries: 12
      delay: 5
      ignore_errors: true

    - name: 获取mongo1 POD 名称
      shell: "kubectl get pod -n {{ APP_NAMESPACE }} -o custom-columns=NAME:.metadata.name | grep mongo1"
      register: shell_result
      connection: local
      run_once: true

    - name: set vars
      set_fact:
        mongo_pod_name: "{{ shell_result.stdout }}"
        mongo_pod_shell: "kubectl exec -n {{ APP_NAMESPACE }} {{ shell_result.stdout }} -- "
      connection: local
      run_once: true

    - name: 暂停30秒等待mongo启动完成
      wait_for: timeout=30

    - name: 尝试查询复制集状态
      shell: "{{ mongo_pod_shell }} mongo --quiet --eval 'rs.status()'"
      register: rs_status
      connection: local
      run_once: true
            
    - name: 设置初始化标识
      set_fact:
        init_flag: '{% if "requires authentication" in rs_status.stdout %}1{% else %}0{% endif %}'
      connection: local
      run_once: true

    - import_tasks: init_repl_set.yml

    - name: 创建数据库管理员账号
      shell: '{{ mongo_pod_shell }} mongo --eval ''db.getSiblingDB("admin").runCommand({createUser: "{{ MONGODB_ADMIN_USER }}",pwd: "{{ MONGODB_ADMIN_PWD }}",roles: [{role:"root", db: "admin"}]})'''
      when: 'mongodb_auth_mode == "yes" and "0" == init_flag'
      register: mongo_result
      failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
      connection: local
      run_once: true
      no_log: true

- name: 再次获取所有已经创建的POD信息
  command: "kubectl get pod -n {{ APP_NAMESPACE }}"
  register: pod_info
  run_once: true
  connection: local

- name: pss模式修复
  when: '"mongo"  in pod_info.stdout and mongodb_deploy_mode == "3" and mongdb_cluster_mode == "pss"'
  block:
    - import_tasks: update_repl_pss_set.yml

- name: psa模式修复
  when: '"mongo"  in pod_info.stdout and mongodb_deploy_mode == "3" and mongdb_cluster_mode == "psa"'
  block:
    - import_tasks: update_repl_psa_set.yml


- block:
  - name: 准备MongoDB NodePort部署文件
    template: src=mongo-nodeport.yaml.j2 dest={{ yaml_dir }}/mongo/mongo-nodeport.yaml
  - name: 部署MongoDB NodePort
    shell: "kubectl apply -f {{ yaml_dir }}/mongo/mongo-nodeport.yaml"
  when: '"" != MONGODB_NODEPORT and "mongo-node" not in pod_info.stdout'
  run_once: true
  connection: local

- name: 准备backup目录
  file: path="{{ mongodb_backup_dir }}" state=directory

- name: 查询系统信息
  shell: "uname -r"
  register: uname

- name: 准备backup目录mongodb-database-tools
  file: path="{{ mongodb_backup_dir }}/{{ uname.stdout }}/mongodb-database-tools" state=directory   

- name: 复制mongodb安装工具 rpms
  copy:
    src: "{{ base_dir }}/down/rpms/{{ uname.stdout }}/mongodb-database-tools/{{ mongodb_tool }}"
    dest: "{{ mongodb_backup_dir }}/{{ uname.stdout }}/mongodb-database-tools/{{ mongodb_tool }}"
  
#- name: 安装mongodb工具 rpms
#  yum: name={{ mongodb_backup_dir }}/{{ uname.stdout }}/mongodb-database-tools/{{ mongodb_tool }} disable_gpg_check=Yes state=present
  
- name: 删除 rpms 安装文件
  shell: "rm -f {{ mongodb_backup_dir }}/{{ uname.stdout }}/mongodb-database-tools/{{ mongodb_tool }}"
    
- name: 获取备份脚本文件名称
  command: "ls {{ KAD_PACKAGE_DIR }}"
  register: ls_result
  connection: local
  
- name: 安装脚本
  when: '"tool" in ls_result.stdout'
  block:
    - name: 复制数据备份脚本
      copy: src="{{ KAD_PACKAGE_DIR }}/tool" dest="{{ mongodb_backup_dir }}"

    - name: 设置脚本执行权限
      shell: "chmod +x {{ mongodb_backup_dir }}/tool/*.sh"
      args:
        warn: no
