- name: 获取namespace是否存在
  command: "{{ bin_dir }}/kubectl get namespaces"
  register: namespaces_info

- name: 创建namespace
  shell: "{{ bin_dir }}/kubectl create namespace {{ APP_NAMESPACE }}"
  when: 'APP_NAMESPACE not in namespaces_info.stdout'

- name: 获取secret数据
  command: "{{ bin_dir }}/kubectl get secret -n {{ APP_NAMESPACE }}"
  when: 'PRIVATE_REGISTRY_ENABLED == "yes"'
  register: secret_info

- name: 创建regsecret
  shell: "{{ bin_dir }}/kubectl create secret docker-registry regsecret --docker-server={{ PRIVATE_INSECURE_REGISTRY }} --docker-username={{ PRIVATE_REGISTRY_USER }} --docker-password={{ PRIVATE_REGISTRY_PWD }} --namespace={{ APP_NAMESPACE }}"
  when: 'PRIVATE_REGISTRY_ENABLED == "yes" and "regsecret" not in secret_info.stdout'

- name: 准备目录
  file: path={{ item }} state=directory
  with_items:
  - "{{ namespace_dir }}/yaml"
  - "{{ namespace_dir }}/conf"

- name: 拷贝smpplus配置文件
  vars:
    src_path: "{{ KAD_PACKAGE_DIR }}/conf/{{ item }}"
    dest_path: "{{ namespace_dir }}/conf/{{ item }}"
  copy: src="{{ src_path }}/" dest="{{ dest_path }}/"
  when: 'src_path is exists and dest_path is not exists'
  with_items:
    - "aggregation"
    - "authentication"
    - "freeradius"
    - "frontend-smp"
    - "frontend-portal"
    - "eportal"
    - "linkid"
    - "component"
    - "license"
    - "nodeidentify"
#    - "adminui"
    - "sms-middleware"
    - "gate"
    - "share"
    - "operations"
    - "authentication-api"
    - "nodeconnector"
    - "pcap-scan"
    - "linkage-devices"
    - "frontend-client"
    - "flow"
    - "aiidentify" 
    - "aitrain"
    - "rg-log"
- name: 获取autostart.sh状态
  stat: path="/etc/init.d/autostart.sh"
  register: data_dir_stat  

- name: 设置自动配置iptables脚本
  vars: 
    portlist: "{{ iptables_port | join(',') }}"
  template: src="autostart.sh.j2" dest="/etc/init.d/autostart.sh"
 
- name: 获取autostart.sh状态
  stat: path="/etc/init.d/autostart.sh"
  register: data_dir_stat_new  

- name: 设置脚本执行权限
  file: name="{{ item }}" mode=0700
  with_items:
  - "/etc/init.d/autostart.sh"
  when: 'data_dir_stat_new.stat.exists'

- name: 设置脚本开机执行
  shell: systemctl enable autostart.sh
  when: 'data_dir_stat_new.stat.exists'

- name: 初次执行autostart.sh脚本
  shell: sh /etc/init.d/autostart.sh
  when: 'not data_dir_stat.stat.exists'

