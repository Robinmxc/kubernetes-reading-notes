- name: 检查数据库账号
  fail: msg="数据库账号{{ item.user_param_name }}不符合要求，{{ db_user_invalid_msg }}"
  when: 'item.user is not search(db_user_pattern)'
  connection: local
  run_once: true
  with_items: "{{ db_pwd_checklist }}"

- block:
  - name: 修改hostIp为当前服务Ip
    replace: path="{{ KAD_PACKAGE_DIR }}/db/smpplus/nodes_upgrade_db/smpplus/3.3.4/psscript/00-constant.js" regexp="{{ item.regexp }}" replace="{{ item.replace }}"
    with_items:
    - {regexp: "const hostIp.*$", replace: "const hostIp = {{groups['kube_node'][0]}}"}
  
  - name: 压缩数据初始化脚本
    archive:
      path: "{{ KAD_PACKAGE_DIR }}/db/"
      dest: "{{ temp_dir }}/{{ KAD_PACKAGE_NAME }}-data.tgz"
    connection: local
    run_once: true

  - name: 复制数据初始化脚本
    copy: src="{{ temp_dir }}/{{ KAD_PACKAGE_NAME }}-data.tgz" dest="{{ mongodb_init_dir }}/data.tgz"

  - name: 解压数据初始化脚本
    unarchive:
      src: "{{ mongodb_init_dir }}/data.tgz"
      dest: "{{ mongodb_init_dir }}/"
      remote_src: yes

  - name: 设置文件执行权限
    file: name="{{ item }}" mode=0700
    with_items:
    - "{{ mongodb_init_dir }}/smpplus/rg-init-db/init-data.sh"
    - "{{ mongodb_init_dir }}/smpplus/rg-upgrade-db/upgrade_data.sh"

  - name: 执行初始化数据库解压
    shell: 'unrar x -o+ {{ mongodb_init_dir }}/smpplus/rg-init-db/SMP_DATA.rar {{ mongodb_init_dir }}/smpplus/rg-init-db/'
    connection: local

  - name: 查询数据库SYSTEM_VERSION中保存的组件数据库版本
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("admin").getCollection("SYSTEM_VERSION").find({"_id":"DB_VERSION"})'''
    register: db_version
    failed_when: 'db_version.stdout is search(mongo_shell_fail_pattern) and db_version.stdout is not search(mongo_shell_success_pattern)' 
    connection: local

  - name: 执行初始化基础库脚本
    shell: '{{ mongo_pod_shell }} /ruijie/init/smpplus/rg-init-db/init-data.sh 127.0.0.1 27017 {{ MONGODB_ADMIN_USER }} {{ MONGODB_ADMIN_PWD }}'
    when: '"DB_VERSION" not in db_version.stdout'
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 查询数据库SYSTEM_VERSION中保存的组件数据库版本
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("admin").getCollection("SYSTEM_VERSION").find({"_id":"DB_VERSION"})'''
    register: db_version
    failed_when: 'db_version.stdout is search(mongo_shell_fail_pattern) and db_version.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: SYSTEM_VERSION表中新增组件数据库版本记录
    shell: '{{ mongo_shell }}  --eval ''db.getSiblingDB("admin").getCollection("SYSTEM_VERSION").insert({"_id":"DB_VERSION"})'''
    when: '"DB_VERSION" not in db_version.stdout'
    connection: local

  - name: 新增组件对应的数据库版本初始化
    vars:
      comp_name: "{{ item }}"
      db_name: "{{ comp_name }}_version"
    shell: '{{ mongo_shell }}  --eval ''db.getSiblingDB("admin").runCommand({"findAndModify":"SYSTEM_VERSION","query":{"_id":"DB_VERSION"},"update":{"$set":{"{{ db_name }}":"3.3.0"}},"new":true})'''
    when: 'db_name not in db_version.stdout'
    with_items:
      - "eportal"
      - "linkid-dev"
      - "nodes"
      - "node-identify"
      - "component"
      - "license"
      - "operations"
      - "database-ops-history"
    connection: local

  - name: 查询数据库SYSTEM_VERSION中保存的组件数据库版本
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("admin").getCollection("SYSTEM_VERSION").find({"_id":"DB_VERSION"})'''
    register: db_version
    failed_when: 'db_version.stdout is search(mongo_shell_fail_pattern) and db_version.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 准备升级数据的脚本
    vars:
      current_db_version: '{% if db_version.stdout is defined %}{{db_version.stdout_lines|last|from_json}}{% endif%}'
      src_file: update-data.sh.j2
    template: src="{{ src_file }}" dest="{{ mongodb_init_dir }}/update-data.sh"

  - name: 设置升级脚本文件执行权限
    file: name="{{ item }}" mode=0700
    with_items:
      - "{{ mongodb_init_dir }}/update-data.sh"

  - name: 执行基于基础库的升级脚本
    shell: '{{ mongo_pod_shell }} /ruijie/init/update-data.sh'
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 保存数据库版本到SYSTEM_VERSION表中
    vars:
      comp_name: "{{ item }}"
      db_name: "{{ DB_VERSION[comp_name].name }}_version"
      db_cur_version: "{{ DB_VERSION[comp_name].version }}"
    shell: '{{ mongo_shell }}  --eval ''db.getSiblingDB("admin").runCommand({"findAndModify":"SYSTEM_VERSION","query":{"_id":"DB_VERSION"},"update":{"$set":{"{{ db_name }}":"{{ db_cur_version }}"}},"new":true})'''
    with_items: "{{ DB_VERSION.keys() }}"
    when: "DB_VERSION is defined"
    connection: local
    
  - name: 准备创建数据库用户的脚本
    template: src="create-users.js.j2" dest="{{ mongodb_init_dir }}/create-users.js"

  - name: 初始化数据库用户
    shell: "{{ mongo_shell }} /ruijie/init/create-users.js"
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local
    no_log: true
  when: 'inventory_hostname == groups.mongodb[0]'
