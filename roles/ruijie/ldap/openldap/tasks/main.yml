- name: 检查ldap的服务状态
  stat:
    path: /usr/lib/systemd/system/slapd.service    #这个服务状态不能用shell命令吗system status slapd
  register: slapd_stat

- name: 部署slapd
  when: 'not slapd_stat.stat.exists'
  block:
  - name: 准备目录
    file: name={{ item }} state=directory
    with_items:
    - "{{ DATA_DIR }}/slapd"
    - "{{ ldap_default_data_dir }}"
    - "{{ ldap_customer_data_dir }}"

  - name: 解压 slapd 安装包
    shell: "tar -zxvf {{ DEST_FILE_PATH }}/{{ ldap_file }} -C {{ DATA_DIR }}/slapd >/dev/null"

  - name: 安装 rpm
    shell: "{{ DATA_DIR }}/slapd/ldap/ldap-install.sh {{ DATA_DIR }}/slapd/ldap"

  - name: 注册ldap数据库类型
    set_fact:
      ldapDbType: 'mdb'
    when: ("Anolis"  in  ansible_distribution or "openEuler"  in  ansible_distribution or "Kylin"  in  ansible_distribution )

  - name: 注册ldap数据库类型
    set_fact:
      ldapDbType: 'hdb'
    when: (ansible_distribution == "CentOS" or ansible_distribution == "RedHat") and ansible_distribution_major_version == "7"

  # cento8的处理开始
  - name: 修改service参数
    vars:
      SLAPD_URLS: "{{ ldap_port_conf }}"
    template: src='slapd.service.anolis.j2' dest='/usr/lib/systemd/system/slapd.service'
    when: ("Anolis"  in  ansible_distribution or "openEuler"  in  ansible_distribution  or "Kylin"  in  ansible_distribution )

  - name: 修改service参数
    template: src='slapd.service.j2' dest='/usr/lib/systemd/system/slapd.service'
    when: (ansible_distribution == "CentOS" or ansible_distribution == "RedHat") and ansible_distribution_major_version == "7"

  - name: openldap证书处理
    shell: "openssl req -x509 -nodes -days 7300 -newkey rsa:2048 -subj '/CN=localhost'  -keyout /etc/pki/tls/ldapserver.key -out /etc/pki/tls/ldapserver.crt"
    when: ("Anolis"  in  ansible_distribution or "openEuler"  in  ansible_distribution  or "Kylin"  in  ansible_distribution )

  - name: tls加密文件配置
    template: src='add-tls.ldif.anolis.j2' dest='/etc/openldap/add-tls.ldif'
    when: ("Anolis"  in  ansible_distribution or "openEuler"  in  ansible_distribution  or "Kylin"  in  ansible_distribution )

  - name: 修改ldap参数
    template: src='ldap.anolis.conf.j2' dest='/etc/openldap/ldap.conf'
    when: ("Anolis"  in  ansible_distribution or "openEuler"  in  ansible_distribution  or "Kylin"  in  ansible_distribution )

  # cento7的处理开始
  - name: 修改slapd端口
    vars:
      SLAPD_URLS: "{{ ldap_port_conf }}"
    template:
      src: 'slapd.j2'
      dest: /etc/sysconfig/slapd
    when: (ansible_distribution == "CentOS" or ansible_distribution == "RedHat") and ansible_distribution_major_version == "7"

  - name: 准备目录
    file: name={{ item }} state=directory
    with_items:
    - "/etc/openldap/certs"
    when: (ansible_distribution == "CentOS" or ansible_distribution == "RedHat") and ansible_distribution_major_version == "7"

  - name: 设置证书过期时间
    replace: path="/usr/libexec/openldap/generate-server-cert.sh" regexp="{{ item.regexp }}" replace="{{ item.replace }}"
    with_items:
      - {regexp: "^CERT_VALID_MONTHS=.*$", replace: "CERT_VALID_MONTHS=240"}
    ignore_errors: true
    no_log: true
    when: (ansible_distribution == "CentOS" or ansible_distribution == "RedHat") and ansible_distribution_major_version == "7"

  - name: 准备证书文件
    shell: "sh /usr/libexec/openldap/create-certdb.sh && sh /usr/libexec/openldap/generate-server-cert.sh"
    ignore_errors: true
    no_log: true
    when: (ansible_distribution == "CentOS" or ansible_distribution == "RedHat") and ansible_distribution_major_version == "7"

  - name: 准备配置文件
    tags:
      - config
    template:
      src: 'DB_CONFIG.j2'
      dest: "{{ ldap_default_data_dir }}/DB_CONFIG"
    when: (ansible_distribution == "CentOS" or ansible_distribution == "RedHat") and ansible_distribution_major_version == "7"

  - name: 赋予文件权限
    shell: "chown ldap. {{ ldap_default_data_dir }}/DB_CONFIG"
    when: (ansible_distribution == "CentOS" or ansible_distribution == "RedHat") and ansible_distribution_major_version == "7"

  # cento7的处理结束

  - name: 设置日志文件
    template: src='openldap_log.conf.j2' dest='/etc/rsyslog.d/openldap.conf'

  - name: 设置日志文件清理条件
    template: src='openldap_logrotate.conf.j2' dest='/etc/logrotate.d/openldap.conf'

  - name: 日志配置生效
    shell: "systemctl restart rsyslog.service"
    ignore_errors: true

- name: 开机启用 slapd 服务
  tags:
    - config
  shell: systemctl enable slapd.service
  ignore_errors: true

- name: 开启 slapd 服务
  tags:
    - config
  shell: systemctl daemon-reload && systemctl restart slapd.service

- name: 等待 slapd 启动完成
  shell: "systemctl status slapd.service|grep Active"
  register: slapd_status
  until: '"running" in slapd_status.stdout'
  retries: 8
  delay: 2


- name: 生成 admin 密码
  shell: "slappasswd -s {{ LDAP.LDAP_ADMIN_PWD }}"
  register: slapd_pwd_status

- name: 准备基本配置文件
  tags:
    - config
  vars:
    ldappasswd: '{{ slapd_pwd_status.stdout }}'
    filename: '{{ item }}'
    ldap_db_type: '{{ ldapDbType }}'
  template:
    src: '{{ filename }}.j2'
    dest: /etc/openldap/{{ filename }}
  with_items:
  - "chrootpw.ldif"
  - "chdomain.ldif"
  - "add_ppolicy.ldif"
  - "modify_ppolicy.ldif"
  - "ppolicy_overlay.ldif"
  - "disable_anon.ldif"
  - "db-index.ldif"
  - "db-directory.ldif"
  - "olcAccess.ldif"
  - "limits.ldif"
  - "limits2.ldif"
  - "tls1.2.ldif"

- name: 准备schema文件
  tags:
    - config
  template:
    src: '{{ item }}.j2'
    dest: /etc/openldap/schema/{{ item }}
  with_items:
    - "sid_user.ldif"

- name: 执行生效命令
  shell: ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/chrootpw.ldif

- name: 导入基本的Schema模式 # 执行多条shell
  vars:
    file_name: '{{ item }}'
    ldap_db_type: '{{ ldapDbType}}'
  shell: ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/{{ file_name }}
  with_items:
  - "cosine.ldif"
  - "nis.ldif"
  - "inetorgperson.ldif"
  - "sid_user.ldif"
  ignore_errors: true

- name: 添加索引
  shell: ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f /etc/openldap/db-index.ldif

- name: 导入基础域名
  tags:
  - config
  vars:
    ldappasswd: '{{ slapd_pwd_status.stdout }}'
    schema_item: '{{ item }}'
  shell: ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/{{ schema_item }}
  with_items:
  - "chdomain.ldif"

- name: 生成 readonly 密码
  shell: "slappasswd -s {{ LDAP.LDAP_READONLY_PWD }}"
  register: readonly_pwd_status
  run_once: true

- name: name.ldif文件
  vars:
    readonly_pwd: '{{ readonly_pwd_status.stdout }}'
  template:
    src: 'name.ldif.j2'
    dest: /etc/openldap/name.ldif

- name: 导入name.ldif文件
  shell: ldapadd -x -H ldapi:/// -D "cn=admin,{{ LDAP.LDAP_BASE_DN }}" -w {{ LDAP.LDAP_ADMIN_PWD }} -f /etc/openldap/name.ldif

- name: 密码策略配置
  shell: 'ldapadd -Y EXTERNAL -H ldapi:/// -D "cn=config" -f /etc/openldap/schema/ppolicy.ldif'
  ignore_errors: true
  when: (ansible_distribution == "CentOS" or ansible_distribution == "RedHat") or  ("Anolis"  in  ansible_distribution and ansible_distribution_major_version == "8") or "Kylin"  in  ansible_distribution 

- name: 加载ppolicy模块
  shell: ldapsearch -Y EXTERNAL -H ldapi:/// -b 'cn=module{0},cn=config'
  register: ppolicy_add_status
  no_log: true
  ignore_errors: true

- name: 存在No such object时执行添加
  shell: ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/add_ppolicy.ldif
  when: '"No such object" in ppolicy_add_status.stdout'

- name: 不存在ppolicy时执行修改
  shell: ldapmodify -Y EXTERNAL -H ldapi:/// -f /etc/openldap/modify_ppolicy.ldif
  when: '"No such object" not in ppolicy_add_status.stdout'

- name: 指定默认策略dn名
  shell: ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/ppolicy_overlay.ldif

- name: 禁止匿名访问
  shell: ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/disable_anon.ldif

- name: 设置访问权限
  shell: ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/olcAccess.ldif

- name: 取消只读账号最大读取500条记录限制
  shell: ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/limits.ldif

- name: 调整索引数据最大条目限制
  shell: ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/limits2.ldif
  when: ("openEuler"  in  ansible_distribution and ansible_distribution_major_version == "22") or  ("Anolis"  in  ansible_distribution and ansible_distribution_major_version == "8")  or "Kylin"  in  ansible_distribution 

- name: tls加密开启
  shell: chmod 644 /etc/pki/tls/ldapserver*
  when: ("openEuler"  in  ansible_distribution and ansible_distribution_major_version == "22") or  ("Anolis"  in  ansible_distribution and ansible_distribution_major_version == "8") or "Kylin"  in  ansible_distribution 

- name: tls加密开启
  shell: ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/add-tls.ldif
  when: ("openEuler"  in  ansible_distribution and ansible_distribution_major_version == "22") or  ("Anolis"  in  ansible_distribution and ansible_distribution_major_version == "8") or "Kylin"  in  ansible_distribution 

- name: 设置ldap默认的ssl加密算法
  shell: ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/tls1.2.ldif

- name: 生成双主配置文件
  when: ' ldap_deploy_mode == "2"'
  block:
  - name: 准备双主配置文件
    vars:
      file_name: '{{ item }}'
      ldap_db_type: '{{ ldapDbType }}'
    template:
      src: '{{ file_name }}.j2'
      dest: /etc/openldap/{{ file_name }}
    with_items:
    - "mod_syncprov.ldif"
    - "syncprov.ldif"

  - name: 生成双主特殊配置文件
    vars:
      ldap_1_hostname: "{{ groups.ldap[0] }}"
      ldap_2_hostname: "{{ groups.ldap[1] }}"
      port: "{{ LDAP.LDAP_PORT }}"
      ldap_db_type: '{{ ldapDbType }}'         
    template:
      src: 'master_node.j2'
      dest: /etc/openldap/master_node.ldif
    when: (ansible_distribution == "CentOS" or ansible_distribution == "RedHat") and ansible_distribution_major_version == "7"

  - name: 生成双主特殊配置文件
    vars:
      ldap_1_hostname: "{{ groups.ldap[0] }}"
      ldap_2_hostname: "{{ groups.ldap[1] }}"
      port: "{{ LDAP.LDAP_PORT }}"
      ldap_db_type: '{{ ldapDbType }}'
    template:
      src: 'master_node_openEuler.j2'
      dest: /etc/openldap/master_node.ldif
    when: ("openEuler"  in  ansible_distribution and ansible_distribution_major_version == "22") or  ("Anolis"  in  ansible_distribution and ansible_distribution_major_version == "8")  or "Kylin"  in  ansible_distribution 

  - name: 导入双主配置文件
    vars:
      file_name: '{{ item }}'
      ldap_db_type: '{{ ldapDbType }}'
    shell: ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/{{ file_name }}
    with_items:
    - "mod_syncprov.ldif"
    - "syncprov.ldif"
    - "master_node.ldif"

- name: 调整默认数据库路径配置
  block:
    - name: 停止slap服务
      shell: systemctl stop slapd

    - name: copy数据库文件
      shell: "cp -rf {{ ldap_default_data_dir }}/* {{ ldap_customer_data_dir }}"

    - name: 赋予文件权限
      shell: "chown -R ldap:ldap {{ ldap_customer_data_dir }}"

    - name: 获取当前ldap数据目录
      shell: "egrep -r '^olcDbDirectory: (.*)$' /etc/openldap/slapd.d/ |awk -F : '{ print $1 }'"
      register: current_config_dir

    - name: 修改配置
      replace:
        path: "{{ current_config_dir.stdout }}"
        regexp: "^olcDbDirectory: (.*)$"
        replace: "olcDbDirectory: {{ ldap_customer_data_dir }}"

    - name: 清理默认目录
      file:
        name: "{{ ldap_default_data_dir }}"
        state: absent

    - name: 启动slap服务
      shell: systemctl start slapd

    - name: 再次校准mdb文件
      shell: ldapmodify -Y EXTERNAL -H ldapi:/// -f /etc/openldap/db-directory.ldif

- name: 设置定时清理Berkeley DB Logs
  file:
    name: "/var/spool/cron/root"
    state: touch

- name: 清理数据库校验
  shell: sed -i '/db_checkpoint/d' /var/spool/cron/root
- name: 添加数据库校验
  shell: echo '0 3 * * * db_checkpoint -1 -h {{ ldap_customer_data_dir }}' >> /var/spool/cron/root
- name: 清理数据库备份
  shell: sed -i '/db_archive/d' /var/spool/cron/root
- name: 添加数据库备份
  shell: echo '0 4 * * * db_archive -d -h {{ ldap_customer_data_dir }}' >> /var/spool/cron/root
