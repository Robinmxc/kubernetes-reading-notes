apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rg-authentication-validate
  namespace: {{ APP_NAMESPACE }}
  labels:
    k8s-app: rg-authentication-validate
spec:
  serviceName: rg-authentication-validate
  replicas: {{ deploy_conf.replicas }}
  selector:
    matchLabels:
      k8s-app: rg-authentication-validate
  template:
    metadata:
      labels:
        k8s-app: rg-authentication-validate
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      nodeName: {{ deploy_node_ip }}
      hostAliases:
      - ip: "{{ deploy_node_ip }}"
        hostnames:
        - "rg-authentication-validate"
      containers:
      - name: rg-auth-extend
        image: {{ PRIVATE_INSECURE_REGISTRY }}/{{ SOURCEID_DOCKERS["auth-extend"].name }}:{{ SOURCEID_DOCKERS["auth-extend"].version }}
        imagePullPolicy: IfNotPresent
{% if "dict" == (deploy_conf.resources | type_debug) %}
        resources:
          limits:
            cpu: {{ deploy_conf.resources.limits.cpu }}
            memory: {{ deploy_conf.resources.limits.memory }}
          requests:
            cpu: {{ deploy_conf.resources.requests.cpu }}
            memory: {{ deploy_conf.resources.requests.memory }}
{% endif %}
        ports:
        - containerPort: 8888
        volumeMounts:
        - mountPath: /ruijie/auth-extend/conf
          name: ae-conf
        - mountPath: /logs
          name: ae-logpath
        - mountPath: /skywalking/agent
          name: ae-agent

{%if HEALTH_CHECK["enable"] and (HEALTH_CHECK["rg-authentication-validate"] is not defined or HEALTH_CHECK["rg-authentication-validate"])  %}
        startupProbe:
          failureThreshold: 20
          httpGet:
            path: /liveProbe
            port: 8888
            scheme: HTTP
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1

        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /liveProbe
            port: 8888
            scheme: HTTP
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1

        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /liveProbe
            port: 8888
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
{% endif %}

      - name: rg-ess
        image: {{ PRIVATE_INSECURE_REGISTRY }}/{{ SOURCEID_DOCKERS["ess"].name }}:{{ SOURCEID_DOCKERS["ess"].version }}
        imagePullPolicy: IfNotPresent
{% if "dict" == (deploy_conf.resources | type_debug) %}
        resources:
          limits:
            cpu: {{ deploy_conf.resources.limits.cpu }}
            memory: {{ deploy_conf.resources.limits.memory }}
          requests:
            cpu: {{ deploy_conf.resources.requests.cpu }}
            memory: {{ deploy_conf.resources.requests.memory }}
{% endif %}
        ports:
        - containerPort: 8080
        - containerPort: 10001
        volumeMounts:
        - mountPath: /opt/ess/log
          name: ess-log
        - mountPath: /opt/ess/server/license
          name: ess-license
        env:
        - name: PGSQL_ADDRESS
          value: jdbc:postgresql://{{ pgsql_node_ip }}:5432/
        - name: PGSQL_DB_NAME
          value: essdb
        - name: PGSQL_USERNAME
          value: postgres
        - name: PGSQL_PASSWORD
          value: {{ PGSQL_ADMIN_PWD }}
        - name: ESS_PORT_80_REL
          value: "{{ var_conf.ess_port_80_rel }}"
        - name: ESS_PORT_8080_REL
          value: "{{ var_conf.ess_port_8080_rel }}"
        - name: ESS_PORT_443_REL
          value: "{{ var_conf.ess_port_443_rel }}"
        - name: ESS_PORT_8443_REL
          value: "{{ var_conf.ess_port_8443_rel }}"
        - name: integrate_run
          value: "{{ var_conf.integrate_run }}"
        - name: TERM
          value: {{ var_conf.term }}
        - name: scene
          value: {{ var_conf.scene }}
        - name: VIP
          value: {{ deploy_node_ip }}
        - name: CURRENT_NODE_IP
          value: {{ deploy_node_ip }}


{%if HEALTH_CHECK["enable"] and (HEALTH_CHECK["rg-authentication-validate"] is not defined or HEALTH_CHECK["rg-authentication-validate"])  %}
        startupProbe:
          failureThreshold: 100
          httpGet:
            path: /aaa/rest/liveProbe
            port: 8080
            scheme: HTTP
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1

        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /aaa/rest/liveProbe
            port: 8080
            scheme: HTTP
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1

        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /aaa/rest/liveProbe
            port: 8080
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
{% endif %}

      imagePullSecrets:
      - name: regsecret
      volumes:
        - name: ae-conf
          hostPath:
            path: {{ config_base_dir }}/sourceid/auth-extend/conf
        - name: ae-logpath
          hostPath:
            path: {{ config_base_dir }}/logs
        - name: ae-agent
          emptyDir: {}
        - name: ess-log
          hostPath:
            path: {{ config_base_dir }}/logs/ess
        - name: ess-license
          hostPath:
            path: {{ config_base_dir }}/sourceid/ess/license


---
apiVersion: v1
kind: Service
metadata:
  name: rg-authentication-validate
  namespace: {{ APP_NAMESPACE }}
spec:
  selector:
    k8s-app: rg-authentication-validate
  ports:
  - port: 8888
    name: rg-auth-extend
    targetPort: 8888
  - port: 8080
    name: rg-ess
    targetPort: 8080
  - port: 10001
    name: rg-ess-10001
    targetPort: 10001

---
apiVersion: v1
kind: Service
metadata:
  name: rg-log-node
  namespace: {{ APP_NAMESPACE }}
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 8908
      nodePort: 30908
  selector:
    k8s-app: rg-log

---
apiVersion: v1
kind: Service
metadata:
  name: rg-rocket-node
  namespace: {{ APP_NAMESPACE }}
spec:
  type: NodePort
  ports:
    - port: 9876
      targetPort: 9876
      nodePort: 9876
  selector:
    k8s-app: rg-rocket
