apiVersion: apps/v1
kind: Deployment
metadata:
  name: rg-sso
  namespace: {{ APP_NAMESPACE }}
  labels:
    k8s-app: rg-sso
spec:
  replicas: {{ deploy_conf.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      k8s-app: rg-sso
  template:
    metadata:
      labels:
        k8s-app: rg-sso
    spec:
{% if "" != SOURCEID_SSO_HOST_ALIAS and "offload" != SOURCEID_HTTPS_MODE %}
      hostAliases:
      - ip: "{{ SOURCEID_SSO_HOST_ALIAS }}"
        hostnames:
        - "{{ SOURCEID_SSO_DOMAIN }}"
{% endif %}
{%if SKYWALKING["enable"] %}
      initContainers:
      - name: init-agent
        image: {{ PRIVATE_INSECURE_REGISTRY }}/sourceid/skywalking:{{ SKYWALKING.IMAGE_VERSION }}
        command:
        - 'sh'
        - '-c'
        - 'set -ex;mkdir -p /skywalking/agent;cp -r /opt/skywalking/agent/* /skywalking/agent;'
        volumeMounts:
        - name: agent
          mountPath: /skywalking/agent
{% endif %}
      containers:
      - name: rg-sso
        image: {{ PRIVATE_INSECURE_REGISTRY }}/{{ SOURCEID_DOCKERS.sso.name }}:{{ SOURCEID_DOCKERS.sso.version }}
        imagePullPolicy: IfNotPresent
        env:
{%if SKYWALKING["enable"] %}
        - name: JAVA_AGENT_EXT
          value: {{ SKYWALKING.JAVA_AGENT_EXT }}
        - name: SW_AGENT_NAME
          value: {{ SKYWALKING.AGENT_PREFIX }}-sso
        - name: SW_AGENT_NAMESPACE
          value: {{ SKYWALKING.NAMESPACE }}
        - name: SW_GRPC_LOG_SERVER_HOST
          value: {{ SKYWALKING.SERVER_HOST }}
        - name: SW_AGENT_COLLECTOR_BACKEND_SERVICES
          value: {{ SKYWALKING.SERVER_HOST }}:11800          
{% endif %}
        - name: JAVA_OPT_EXT
          value: "{{ sso_java_opt }}"
{% if "dict" == (deploy_conf.resources | type_debug) %}
        resources:
          limits:
            cpu: {{ deploy_conf.resources.limits.cpu }}
            memory: {{ deploy_conf.resources.limits.memory }}
          requests:
            cpu: {{ deploy_conf.resources.requests.cpu }}
            memory: {{ deploy_conf.resources.requests.memory }}
{% endif %}
        ports:
        - containerPort: 80
        volumeMounts:
            - mountPath: /etc/cas
              name: etc
            - mountPath: /build
              name: build
            - mountPath: /cas
              name: cas
            - mountPath: /ruijie/sourceid/sso/conf
              name: conf
            - mountPath: /logs
              name: logpath
            - mountPath: /skywalking/agent
              name: agent

{%if HEALTH_CHECK["enable"] and (HEALTH_CHECK["sso"] is not defined or HEALTH_CHECK["sso"]) %}
        startupProbe:
          failureThreshold: 40
          httpGet:
{% if SOURCEID_DOMAIN_MODE == "single" %}
            path: /{{ CAS_SUFFIX }}/liveProbe
{% else %}
            path: /liveProbe
{% endif %}
            port: 80
            scheme: HTTP
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1

        readinessProbe:
          failureThreshold: 3
          httpGet:
{% if SOURCEID_DOMAIN_MODE == "single" %}
            path: /{{ CAS_SUFFIX }}/liveProbe
{% else %}
            path: /liveProbe
{% endif %}
            port: 80
            scheme: HTTP
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
          
        livenessProbe:
          failureThreshold: 5
          httpGet:
{% if SOURCEID_DOMAIN_MODE == "single" %}
            path: /{{ CAS_SUFFIX }}/liveProbe
{% else %}
            path: /liveProbe
{% endif %}
            port: 80
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
{% endif %}

      imagePullSecrets:
      - name: regsecret
      volumes:
        - emptyDir: {}
          name: etc
        - emptyDir: {}
          name: build
        - emptyDir: {}
          name: cas
        - name: conf
          hostPath:
            path: {{ config_base_dir }}/sourceid/sso/conf
        - name: logpath
          hostPath:
            path: {{ config_base_dir }}/logs
        - name: agent
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: rg-sso
  namespace: {{ APP_NAMESPACE }}
spec:
  selector:
    k8s-app: rg-sso
  ports:
  - port: 80
    targetPort: 80

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rg-sso-ingress
  namespace: {{ APP_NAMESPACE }}
{% if '' != CUSTOMIZE_SUFFIX %}
  annotations:
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite ^/{{ CUSTOMIZE_SUFFIX }}/(.*)$ /$1;
{% endif %}
{% if '' != CAS_SUFFIX %}
  annotations:
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite ^/{{ CAS_SUFFIX }}/public/(.*)$ /{{ SELF_SUFFIX }}/public/$1;
      rewrite ^/((?!{{ CAS_SUFFIX }}).*\\.txt)$ /{{ CAS_SUFFIX }}/$1;
{% endif %}
spec:
  ingressClassName: nginx
{% if 'https' == ingress_mode %}
  tls:
    - hosts:
      - {{ SOURCEID_SSO_DOMAIN }}
      secretName: nginx-cert
{% endif %}
  rules:
  - host: {{ SOURCEID_SSO_DOMAIN }}
    http:
      paths:
      - path: /v2/api-docs
        pathType: Prefix
        backend:
          service:
            name: rg-frontend
            port:
              number: 80
      - path: /channel/login
        pathType: Prefix
        backend:
          service:
            name: rg-frontend
            port:
              number: 80
      - path: /channel/oauth2.0/authorize
        pathType: Prefix
        backend:
          service:
            name: rg-frontend
            port:
              number: 80
      - path: /channel/login
        pathType: Prefix
        backend:
          service:
            name: rg-frontend
            port:
              number: 80
      - path: /channel/oauth2.0/authorize
        pathType: Prefix
        backend:
          service:
            name: rg-frontend
            port:
              number: 80
{% if SOURCEID_DOMAIN_MODE == "single" %}
      - path: /{{ CAS_SUFFIX }}/public
        pathType: Prefix
        backend:
          service:
            name: rg-gate
            port:
              number: 80
      - path: /{{ CAS_SUFFIX }}/linkid
        pathType: Prefix
        backend:
          service:
            name: rg-gate
            port:
              number: 80
{% endif %}
      - path: /public
        pathType: Prefix
        backend:
          service:
            name: rg-gate
            port:
              number: 80
      - path: /linkid
        pathType: Prefix
        backend:
          service:
            name: rg-gate
            port:
              number: 80
{% if SOURCEID_DOMAIN_MODE == "single" %}
      - path: /{{ CAS_SUFFIX }}
{% else %}
      - path: /
{% endif %}
        pathType: Prefix
        backend:
          service:
            name: rg-sso
            port:
              number: 80
{% if SOURCEID_DOMAIN_MODE == "single" %}
      - path: /images
        pathType: Prefix
        backend:
          service:
            name: rg-sso
            port:
              number: 80
      - backend:
          service:
            name: rg-sso
            port:
              number: 80
        path: /
        pathType: Prefix
{% endif %}
---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rg-sso-ingress-channel
  namespace: ruijie-sourceid
  annotations:
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite ^/channel/(.*)$ /$1;
spec:
  ingressClassName: nginx
  rules:
  - host: {{ SOURCEID_SSO_DOMAIN }}
    http:
      paths:
      - path: /channel
        pathType: Prefix
        backend:
          service:
            name: rg-sso
            port:
              number: 80
