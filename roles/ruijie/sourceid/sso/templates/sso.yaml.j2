apiVersion: apps/v1
kind: Deployment
metadata:
  name: rg-sso
  namespace: {{ APP_NAMESPACE }}
  labels:
    k8s-app: rg-sso
spec:
  replicas: {{ deploy_conf.replicas }}
  selector:
    matchLabels:
      k8s-app: rg-sso
  template:
    metadata:
      labels:
        k8s-app: rg-sso
    spec:
{% if "" != SOURCEID_SSO_HOST_ALIAS and "offload" != SOURCEID_HTTPS_MODE %}
      hostAliases:
      - ip: "{{ SOURCEID_SSO_HOST_ALIAS }}"
        hostnames:
        - "{{ SOURCEID_SSO_DOMAIN }}"
{% endif %}
      containers:
      - name: rg-sso
        image: {{ PRIVATE_INSECURE_REGISTRY }}/{{ SOURCEID_DOCKERS.sso.name }}:{{ SOURCEID_DOCKERS.sso.version }}
        imagePullPolicy: IfNotPresent
        env:
        - name: JAVA_OPT_EXT
          value: "{{ sso_java_opt }}"
{% if "dict" == (deploy_conf.resources | type_debug) %}
        resources:
          limits:
            cpu: {{ deploy_conf.resources.limits.cpu }}
            memory: {{ deploy_conf.resources.limits.memory }}
          requests:
            cpu: {{ deploy_conf.resources.requests.cpu }}
            memory: {{ deploy_conf.resources.requests.memory }}
{% endif %}
        ports:
        - containerPort: 80
        volumeMounts:
            - mountPath: /etc/cas
              name: etc
            - mountPath: /build
              name: build
            - mountPath: /cas
              name: cas
            - mountPath: /ruijie/sourceid/sso/conf
              name: conf
            - mountPath: /logs
              name: logpath
      imagePullSecrets:
      - name: regsecret
      volumes:
        - emptyDir: {}
          name: etc
        - emptyDir: {}
          name: build
        - emptyDir: {}
          name: cas
        - name: conf
          hostPath:
            path: {{ config_base_dir }}/sourceid/sso/conf
        - name: logpath
          hostPath:
            path: {{ config_base_dir }}/logs
---
apiVersion: v1
kind: Service
metadata:
  name: rg-sso
  namespace: {{ APP_NAMESPACE }}
spec:
  selector:
    k8s-app: rg-sso
  ports:
  - port: 80
    targetPort: 80

---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: rg-sso-ingress
  namespace: {{ APP_NAMESPACE }}
spec:
{% if 'https' == ingress_mode %}
  tls:
    - hosts:
      - {{ SOURCEID_SSO_DOMAIN }}
      secretName: traefik-cert
{% endif %}
  rules:
  - host: {{ SOURCEID_SSO_DOMAIN }}
    http:
      paths:
      - path: /v2/api-docs
        backend:
          serviceName: rg-frontend
          servicePort: 80
      - path: /public
        backend:
          serviceName: rg-gate
          servicePort: 80
      - path: /linkid
        backend:
          serviceName: rg-gate
          servicePort: 80
      - path: /
        backend:
          serviceName: rg-sso
          servicePort: 80
