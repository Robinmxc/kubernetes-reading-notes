- name: 准备目录
  file: path={{ item }} state=directory
  with_items:
  - "{{ workspace_dir }}/bin"
  - "{{ workspace_dir }}/conf"
  - "{{ workspace_dir }}/yaml"
  run_once: true
  connection: local

- name: 获取namespace是否存在
  command: "{{ bin_dir }}/kubectl get namespaces"
  register: namespaces_info
  run_once: true
  connection: local

- name: 创建namespace
  shell: "{{ bin_dir }}/kubectl create namespace {{ APP_NAMESPACE }}"
  when: 'APP_NAMESPACE not in namespaces_info.stdout'
  run_once: true
  connection: local

- name: 获取regsecret是否存在
  command: "{{ bin_dir }}/kubectl get secret -n {{ APP_NAMESPACE }}"
  register: secret_info
  run_once: true
  connection: local

- name: 创建regsecret
  shell: "{{ bin_dir }}/kubectl create secret docker-registry regsecret --docker-server={{ PRIVATE_INSECURE_REGISTRY }} --docker-username={{ PRIVATE_REGISTRY_USER }} --docker-password={{ PRIVATE_REGISTRY_PWD }} --namespace={{ APP_NAMESPACE }}"
  when: '"regsecret" not in secret_info.stdout'
  run_once: true
  connection: local


- name: 获取SSO配置文件状态
  stat: path="{{ workspace_dir }}/conf/sourceid/sso/conf"
  register: path_info
  run_once: true
  connection: local

- name: 准备SSO配置文件
  vars:
    src_path: '{{ setup_file_dir }}/conf/sourceid/sso/conf'
    dest_path: '{{ workspace_dir }}/conf/sourceid/sso/conf'
  block:
  - name: 拷贝SSO配置文件
    copy: src="{{ src_path }}/" dest="{{ dest_path }}/"
  - name: 修改SSO配置文件
    replace: path="{{ dest_path }}/application-bus.properties" regexp="{{ item.regexp }}" replace="{{ item.replace }}"
    with_items:
      - {regexp: "^cas.server.name=.*$", replace: "cas.server.name=http://{{ SOURCEID_SSO_DOMAIN }}"}
      - {regexp: "^front.server.addr=.*$", replace: "front.server.addr=http://{{ SOURCEID_GATE_DOMAIN }}"}
      - {regexp: "^mongodb-base-url=.*$", replace: "mongodb-base-url=mongodb://{{ SOURCEID_CAS_DB_USER }}:{{ SOURCEID_CAS_DB_PWD }}@{{ mongodb_addr }}/cas"}
      - {regexp: "^gateway.feign.base.url.*$", replace: "gateway.feign.base.url={{ SOURCEID_GATEWAY_URL }}"}
      - {regexp: "^cas.view.default-redirect-url.*$", replace: "cas.view.default-redirect-url={{ SOURCEID_REDIRECT_URL }}"}
      - {regexp: "kube-ruijie.svc", replace: "{{ APP_NAMESPACE }}.svc"}
  when: 'not path_info.stat.exists'
  run_once: true
  connection: local


- name: 获取GATE配置文件状态
  stat: path="{{ workspace_dir }}/conf/sourceid/gate/conf"
  register: path_info
  run_once: true
  connection: local

- name: 准备GATE配置文件
  vars:
    src_path: "{{ setup_file_dir }}/conf/sourceid/gate/conf"
    dest_path: "{{ workspace_dir }}/conf/sourceid/gate/conf"
  block:
  - name: 拷贝GATE配置文件
    copy: src="{{ src_path }}/" dest="{{ dest_path }}/"
  - name: 修改GATE配置文件
    replace: path="{{ dest_path }}/application.yml" regexp="{{ item.regexp }}" replace="{{ item.replace }}"
    with_items:
      - {regexp: "^auth-server:.*$", replace: "auth-server: http://{{ SOURCEID_SSO_DOMAIN }}"}
      - {regexp: "mongodb:.*/gate", replace: "mongodb://{{ SOURCEID_GATE_DB_USER }}:{{ SOURCEID_GATE_DB_PWD }}@{{ mongodb_addr }}/gate"}
      - {regexp: "kube-ruijie.svc", replace: "{{ APP_NAMESPACE }}.svc"}
  when: 'not path_info.stat.exists'
  run_once: true
  connection: local


- name: 获取LINKID配置文件状态
  stat: path="{{ workspace_dir }}/conf/sourceid/linkid/conf"
  register: path_info
  run_once: true
  connection: local

- name: 准备LINKID配置文件
  vars:
    src_path: "{{ setup_file_dir }}/conf/sourceid/linkid/conf"
    dest_path: "{{ workspace_dir }}/conf/sourceid/linkid/conf"
  block:
  - name: 拷贝LINKID配置文件
    copy: src="{{ src_path }}/" dest="{{ dest_path }}/"
  - name: 修改LINKID配置文件
    replace: path="{{ dest_path }}/application-bus.properties" regexp="{{ item.regexp }}" replace="{{ item.replace }}"
    with_items:
      - {regexp: "mongodb:.*/linkid-dev", replace: "mongodb://{{ SOURCEID_LINKID_DB_USER }}:{{ SOURCEID_LINKID_DB_PWD }}@{{ mongodb_addr }}/linkid-dev"}
      - {regexp: "kube-ruijie.svc", replace: "{{ APP_NAMESPACE }}.svc"}
  when: 'not path_info.stat.exists'
  run_once: true
  connection: local

- name: 获取COMPONENT配置文件状态
  stat: path="{{ workspace_dir }}/conf/component/conf"
  register: path_info
  run_once: true
  connection: local

- name: 准备COMPONENT配置文件
  vars:
    src_path: "{{ setup_file_dir }}/conf/component/conf"
    dest_path: "{{ workspace_dir }}/conf/component/conf"
  block:
  - name: 拷贝LINKID配置文件
    copy: src="{{ src_path }}/" dest="{{ dest_path }}/"
  - name: 修改COMPONENT配置文件
    replace: path="{{ dest_path }}/application-bus.properties" regexp="{{ item.regexp }}" replace="{{ item.replace }}"
    with_items:
      - {regexp: "mongodb:.*/component", replace: "mongodb://{{ COMPONENT_DB_USER }}:{{ COMPONENT_DB_PWD }}@{{ mongodb_addr }}/component"}
      - {regexp: "kube-ruijie.svc", replace: "{{ APP_NAMESPACE }}.svc"}
  when: 'not path_info.stat.exists'
  run_once: true
  connection: local

- name: 获取FRONTEND配置文件状态
  stat: path="{{ workspace_dir }}/conf/sourceid/frontend/deploy"
  register: path_info
  run_once: true
  connection: local

- name: 准备FRONTEND配置文件
  vars:
    src_path: "{{ setup_file_dir }}/conf/sourceid/frontend/{{ SOURCEID_FRONTEND_RES }}/deploy"
    dest_path: "{{ workspace_dir }}/conf/sourceid/frontend/deploy"
  block:
  - name: 拷贝FRONTEND配置文件
    copy: src="{{ src_path }}/" dest="{{ dest_path }}/"
  - name: 修改FRONTEND配置文件
    replace: path="{{ dest_path }}/deploy.js" regexp="{{ item.regexp }}" replace="{{ item.replace }}"
    with_items:
      - {regexp: "gate.test.com", replace: "{{ SOURCEID_GATE_DOMAIN }}"}
      - {regexp: "service.test.com", replace: "{{ SOURCEID_SSO_DOMAIN }}"}
  when: 'not path_info.stat.exists'
  run_once: true
  connection: local
