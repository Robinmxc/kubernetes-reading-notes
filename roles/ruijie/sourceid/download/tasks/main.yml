- name: 读取daemon.json
  command: "cat /etc/docker/daemon.json"
  register: daemon_json

- block:
  - name: 准备daemon.json
    template: src=daemon.json.j2 dest=/etc/docker/daemon.json
  - name: 重新加载服务配置
    command: "systemctl daemon-reload"
  - name: 重启docker服务
    service: name=docker state=restarted
  - name: 登录docker仓库
    command: "docker login -u {{ PRIVATE_REGISTRY_USER }} -p {{ PRIVATE_REGISTRY_PWD }} {{ PRIVATE_INSECURE_REGISTRY }}"
    connection: local
  when: '"yes" == PRIVATE_REGISTRY_ENABLED and PRIVATE_INSECURE_REGISTRY not in daemon_json.stdout'

- name: 准备下载目录
  file: path={{ item }} state=directory
  with_items:
  - "{{ img_download_dir }}"

- name: 获取已下载的镜像文件信息
  command: "ls {{ img_download_dir }}"
  register: download_info

- name: 获取docker已加载的镜像信息
  command: "docker images --format ''{{ '{{' }}.Repository{{ '}}' }}:{{ '{{' }}.Tag{{ '}}' }}''"
  register: imgages_info

- name: 下载镜像
  vars:
    comp_name: "{{ item }}"
    docker_version: "{{ SOURCEID_DOCKERS[comp_name].version }}"
    img_id_ver: "{{ PRIVATE_INSECURE_REGISTRY }}/{{ SOURCEID_DOCKERS[comp_name].name }}:{{ docker_version }}"
    img_file_name: "{{ comp_name }}-{{ docker_version }}.tar"
  command: 'docker pull {{ img_id_ver }}'
  when: '"" != docker_version and img_id_ver not in imgages_info.stdout and img_file_name not in download_info.stdout'
  with_items: "{{ SOURCEID_DOCKERS.keys() }}"

- name: 保存镜像文件
  vars:
    comp_name: "{{ item }}"
    docker_version: "{{ SOURCEID_DOCKERS[comp_name].version }}"
    img_id_ver: "{{ PRIVATE_INSECURE_REGISTRY }}/{{ SOURCEID_DOCKERS[comp_name].name }}:{{ docker_version }}"
    img_file_name: "{{ comp_name }}-{{ docker_version }}.tar"
  command: 'docker save -o {{ img_download_dir }}/{{ img_file_name }} {{ img_id_ver }}'
  when: '"" != docker_version and img_file_name not in download_info.stdout'
  with_items: "{{ SOURCEID_DOCKERS.keys() }}"
