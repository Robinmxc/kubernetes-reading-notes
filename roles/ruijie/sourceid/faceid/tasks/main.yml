- name: 部署License
  when: 'SOURCEID_FACEID_ENABLED == "yes"'
  block:
  - name: 检查人脸组件版本
    tags:
      - all
    fail: msg="人脸组件版本未设置"
    when: 'SOURCEID_DOCKERS.faceid is not defined'

  - name: 复制配置文件
    tags:
      - config
    copy:
      src: "{{ namespace_dir }}/conf/sourceid/faceid/"
      dest: "{{ config_base_dir }}/sourceid/faceid/conf/"

  - name: 自动配置
    tags:
      - config
    replace: path="{{ config_base_dir }}/sourceid/faceid/conf/application-pro.yml" regexp="{{ item.regexp }}" replace="{{ item.replace }}"
    with_items:
      - {regexp: "mongodb:.*/faceid.*$", replace: "mongodb://{{ SOURCEID_FACEID_DB_USER }}:{{ SOURCEID_FACEID_DB_PWD }}@{{ mongodb_addr }}/faceid?replicaSet=rs0"}
      - {regexp: "kube-ruijie.svc", replace: "{{ APP_NAMESPACE }}.svc"}
      - {regexp: "tracker-server:.*$", replace: "tracker-server: {{ FDFS_TRACKER_SERVERS }}"}
    no_log: true

  - name: 自定义配置
    tags:
      - config
    replace:
      path: '{{ config_base_dir }}/sourceid/faceid/conf/application-pro.yml'
      regexp: '{% if item.regexp is defined %}{{item.regexp}}{% else %}{{ item.name }}\s*=.*${% endif %}'
      replace: '{% if item.regexp is defined %}{{item.value}}{% else %}{{ item.name }}={{item.value}}{% endif %}'
    with_items: '{{ faceid_configs }}'
    no_log: true

  - name: 准备部署文件目录
    tags:
      - config
    file: path={{ item }} state=directory
    with_items:
      - "{{ yaml_dir }}/faceid"
    run_once: true
    connection: local

  - name: 准备部署文件
    tags:
      - config
    vars:
      deploy_conf: '{{ faceid_deploy_conf }}'
    template: src='{{ faceid_templates_path }}faceid.yaml.j2' dest={{ yaml_dir }}/faceid/faceid.yml
    run_once: true
    connection: local

  - name: 查询FACEID数据库用户状态
    tags:
      - deploy
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("faceid").runCommand({usersInfo: "{{ SOURCEID_FACEID_DB_USER }}"})'''
    register: mongo_result
    when: '"yes" == SOURCEID_FACEID_ENABLED'
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    run_once: true
    connection: local
    run_once: true

  - name: 初始化FACEID数据库用户
    tags:
      - deploy
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("faceid").runCommand({createUser: "{{ SOURCEID_FACEID_DB_USER }}", pwd: "{{ SOURCEID_FACEID_DB_PWD }}", roles: [{role:"dbOwner", db: "faceid"}]})'''
    when: '"yes" == SOURCEID_FACEID_ENABLED and SOURCEID_FACEID_DB_USER not in mongo_result.stdout'
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    run_once: true
    connection: local
    no_log: true

  - name: 获取所有已经创建的POD信息
    tags:
      - deploy
    command: "{{ bin_dir }}/kubectl get pod -n {{ APP_NAMESPACE }}"
    register: pod_info
    run_once: true
    connection: local

  - name: 执行部署
    tags:
      - deploy
    shell: "{{ bin_dir }}/kubectl apply -f {{ yaml_dir }}/faceid/"
    when: 'pod_info.stdout is not search("rg-faceid-[a-z0-9]*-[a-z0-9]*\s*[0-9]*/[0-9]*\s*Running")'
    run_once: true
    connection: local
