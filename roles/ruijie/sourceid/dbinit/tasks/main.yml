- block:
  - name: 准备初始化文件
    template: src="{{ item }}.j2" dest="{{ mongodb_init_dir }}/{{ item }}"
    with_items:
    - init-repl-set.js
    - create-users.js

  - name: 获取mongo1 POD 名称
    shell: "{{ bin_dir }}/kubectl get pod -n {{ SOURCEID_NAMESPACE }} -o custom-columns=NAME:.metadata.name | grep mongo1"
    register: pod_name
    connection: local

  - name: 查询复制集状态
    shell: "{{ bin_dir }}/kubectl exec -n {{ SOURCEID_NAMESPACE }} {{ pod_name.stdout }} -- mongo --eval 'rs.status()'"
    register: rs_status
    connection: local

  - name: 初始化复制集
    shell: "{{ bin_dir }}/kubectl exec -n {{ SOURCEID_NAMESPACE }} {{ pod_name.stdout }} -- mongo /data/init/init-repl-set.js"
    when: '"PRIMARY" not in rs_status.stdout'
    connection: local

  - name: 等待复制集初始化完成
    shell: "{{ bin_dir }}/kubectl exec -n {{ SOURCEID_NAMESPACE }} {{ pod_name.stdout }} -- mongo --eval 'rs.status()'"
    connection: local
    register: rs_status
    until: '"PRIMARY" in rs_status.stdout'
    retries: 8
    delay: 8

  - name: 查询用户状态
    shell: '{{ bin_dir }}/kubectl exec -n {{ SOURCEID_NAMESPACE }} {{ pod_name.stdout }} -- mongo --eval ''db.getSiblingDB("cas").runCommand({usersInfo: "cas"})'''
    register: user_status
    connection: local

  - name: 初始化数据库用户
    shell: "{{ bin_dir }}/kubectl exec -n {{ SOURCEID_NAMESPACE }} {{ pod_name.stdout }} -- mongo /data/init/create-users.js"
    when: '"cas" not in user_status.stdout'
    connection: local

  when: 'inventory_hostname == groups.mongodb[0]'
