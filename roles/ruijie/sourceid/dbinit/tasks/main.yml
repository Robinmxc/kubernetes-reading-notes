- name: 检查数据库账号
  fail: msg="数据库账号{{ item.user_param_name }}不符合要求，{{ db_user_invalid_msg }}"
  when: 'item.user is not search(db_user_pattern)'
  connection: local
  run_once: true
  with_items: "{{ db_pwd_checklist }}"

# - name: 检查数据库密码
#   fail: msg="数据库密码{{ item.pwd_param_name }}不符合要求，{{ db_pwd_invalid_msg }}"
#   when: '"" != item.pwd and (item.pwd is not search(db_pwd_pattern1) or item.pwd is not search(db_pwd_pattern2))'
#   connection: local
#   run_once: true
#   with_items: "{{ db_pwd_checklist }}"

- block:
  - name: 压缩数据初始化脚本
    archive:
      path: "{{ KAD_PACKAGE_DIR }}/db/"
      dest: "{{ temp_dir }}/{{ KAD_PACKAGE_NAME }}-data.tgz"
    connection: local
    run_once: true

  - name: 复制数据初始化脚本
    copy: src="{{ temp_dir }}/{{ KAD_PACKAGE_NAME }}-data.tgz" dest="{{ mongodb_init_dir }}/data.tgz"

  - name: 解压数据初始化脚本
    unarchive:
      src: "{{ mongodb_init_dir }}/data.tgz"
      dest: "{{ mongodb_init_dir }}/"
      remote_src: yes

  - name: 检测数据库脚本是否含用户名
    shell: 'grep MONGO_HOST\:\$MONGO_PORT {{ mongodb_init_dir }}/sourceid/rg-upgrade-db/upgrade_data.sh'
    register: grep_result

  - name: 设置数据库脚本版本为
    set_fact:
      db_script_version: "1"
    when: '"MONGO_USER" not in grep_result.stdout'

  - name: 准备创建数据库用户的脚本
    template: src="create-users.js.j2" dest="{{ mongodb_init_dir }}/create-users.js"

  - name: 准备初始化数据的脚本
    vars:
      src_file: '{% if "2" == db_script_version %}init-data-2.sh.j2{% else %}init-data.sh.j2{% endif %}'
    template: src="{{ src_file }}" dest="{{ mongodb_init_dir }}/init-data.sh"

  - name: 修改数据库连接参数
    replace: path="{{ mongodb_init_dir }}/{{ item }}" regexp="^\\s*mongo\\s+" replace="mongo {{ mongo_auth_param }} "
    when: 'mongodb_auth_mode == "yes"'
    with_items:
      - "sourceid/rg-init-db/init-data.sh"
      - "component/rg-init-db/init-data.sh"
      - "component/rg-init-db/upgrade_data.sh"

  - name: 修改数据库连接参数
    replace: path="{{ mongodb_init_dir }}/sourceid/rg-upgrade-db/upgrade_data.sh" regexp="^\\s*mongo\\s+" replace="mongo {{ mongo_auth_param }} "
    when: 'db_script_version < "2"'

  - name: 修改数据库连接参数2
    replace: path="{{ mongodb_init_dir }}/{{ item }}" regexp="^\\s*mongoimport\\s+" replace="mongoimport {{ mongo_auth_param }} "
    when: 'mongodb_auth_mode == "yes"'
    with_items:
      - "sourceid/rg-init-db/init-data.sh"
      - "component/rg-init-db/init-data.sh"

  - name: 设置文件执行权限
    file: name="{{ item }}" mode=0700
    with_items:
    - "{{ mongodb_init_dir }}/init-data.sh"
    - "{{ mongodb_init_dir }}/sourceid/rg-init-db/init-data.sh"
    - "{{ mongodb_init_dir }}/sourceid/rg-upgrade-db/upgrade_data.sh"
    - "{{ mongodb_init_dir }}/component/rg-init-db/init-data.sh"
    - "{{ mongodb_init_dir }}/component/rg-init-db/upgrade_data.sh"

  - name: 查询数据初始化状态
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("cas").runCommand({find:"cas-service-registry", filter: {clientId: "OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w"}})'''
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 执行初始化脚本
    shell: '{{ mongo_pod_shell }} /ruijie/init/init-data.sh'
    when: '"OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w" not in mongo_result.stdout'
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 查询数据初始化状态
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("cas").runCommand({find:"cas-service-registry", filter: {clientId: "OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w"}})'''
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 修改域名
    vars:
      serviceId: '(http|https)://{{ SOURCEID_GATE_DOMAIN }}.*'
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("cas").runCommand({update:"cas-service-registry", updates:[{q:{clientId:"OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w"}, u:{$set:{"serviceId":"{{ serviceId }}", "logoutUrl":"{{ SOURCEID_FRONTEND_URL }}/logout"}}}]})'''
    when: 'SOURCEID_FRONTEND_URL not in mongo_result.stdout'
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 查询sourceiddb数据库版本字段
    shell: |-
      echo '{{mongo_result.stdout}}' | grep -n sourceiddbversion | awk -F ":" '{print $3}'| sed 's/\"//g' | sed 's/\,//g' | sed -e 's/^[ ]*//g' | sed -e 's/[ ]*$//g'
    register: mongo_sourceid_db_version
    when: '"sourceiddbversion" in mongo_result.stdout'
    connection: local

  - name: 查询componentdb数据库版本字段
    shell: |-
      echo '{{mongo_result.stdout}}' | grep -n componentdbversion | awk -F ":" '{print $3}'| sed 's/\"//g' | sed 's/\,//g' | sed -e 's/^[ ]*//g' | sed -e 's/[ ]*$//g'
    register: mongo_component_db_version
    when: '"componentdbversion" in mongo_result.stdout'
    connection: local

  - name: 准备升级数据的脚本
    vars:
      mongo_sourceid_db_version1: '{% if mongo_sourceid_db_version.stdout is defined %}{{mongo_sourceid_db_version.stdout}}{% else %}{{OLD_SOURCEID_DB_VERSION}}{% endif %}'
      mongo_component_db_version1: '{% if mongo_component_db_version.stdout is defined %}{{mongo_component_db_version.stdout}}{% else %}{{OLD_COMPONENT_DB_VERSION}}{% endif %}'
      src_file: update-data.sh.j2
    template: src="{{ src_file }}" dest="{{ mongodb_init_dir }}/update-data.sh"

  - name: 执行升级脚本
    shell: '{{ mongo_pod_shell }} /ruijie/init/update-data.sh'
    when: '"OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w" not in mongo_result.stdout'
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 保存sourceid数据库版本
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("cas").runCommand({"findAndModify":"cas-service-registry","query":{"clientId":"OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w"},"update":{"$set":{"description":"{{SOURCEID_DB_VERSION}}"}},"new":true})'''
    register: mongo_result2
    connection: local

  - name: 保存component数据库版本
    shell: '{{ mongo_shell }} --eval db.getSiblingDB("cas").runCommand({"findAndModify":"cas-service-registry","query":{"clientId":"OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w"},"update":{"$set":{"componentdbversion":"{{COMPONENT_DB_VERSION}}"}},"new":true})'
    register: mongo_result2
    connection: local

  - name: 查询用户状态
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("cas").runCommand({usersInfo: "{{ SOURCEID_CAS_DB_USER }}"})'''
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 初始化数据库用户
    shell: "{{ mongo_shell }} /ruijie/init/create-users.js"
    when: 'SOURCEID_CAS_DB_USER not in mongo_result.stdout'
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local
    no_log: true

  when: 'inventory_hostname == groups.mongodb[0]'
