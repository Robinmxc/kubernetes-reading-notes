- name: 检查数据库账号
  fail: msg="数据库账号{{ item.user_param_name }}不符合要求，{{ db_user_invalid_msg }}"
  when: 'item.user is not search(db_user_pattern)'
  connection: local
  run_once: true
  with_items: "{{ db_pwd_checklist }}"

- block:
  - name: 压缩数据初始化脚本
    archive:
      path: "{{ KAD_PACKAGE_DIR }}/db/"
      dest: "{{ temp_dir }}/{{ KAD_PACKAGE_NAME }}-data.tgz"
    connection: local
    run_once: true

  - name: 复制数据初始化脚本
    copy: src="{{ temp_dir }}/{{ KAD_PACKAGE_NAME }}-data.tgz" dest="{{ mongodb_init_dir }}/data.tgz"

  - name: 解压数据初始化脚本
    unarchive:
      src: "{{ mongodb_init_dir }}/data.tgz"
      dest: "{{ mongodb_init_dir }}/"
      remote_src: yes

  - name: 检测数据库脚本是否含用户名
    shell: 'grep MONGO_HOST\:\$MONGO_PORT {{ mongodb_init_dir }}/sourceid/rg-upgrade-db/upgrade_data.sh'
    register: grep_result

  - name: 设置数据库脚本版本为
    set_fact:
      db_script_version: "1"
    when: '"MONGO_USER" not in grep_result.stdout'

  - name: 准备创建数据库用户的脚本
    template: src="create-users.js.j2" dest="{{ mongodb_init_dir }}/create-users.js"

  - name: 准备更新据库用户的脚本
    template: src="update-users.js.j2" dest="{{ mongodb_init_dir }}/update-users.js"

  - name: 准备初始化数据的脚本
    vars:
      src_file: '{% if "2" == db_script_version %}init-data-2.sh.j2{% else %}init-data.sh.j2{% endif %}'
    template: src="{{ src_file }}" dest="{{ mongodb_init_dir }}/init-data.sh"

  - name: 修改数据库连接参数
    replace: path="{{ mongodb_init_dir }}/{{ item }}" regexp="^\\s*mongo\\s+" replace="mongo {{ mongo_auth_param }} "
    when: 'mongodb_auth_mode == "yes"'
    with_items:
      - "sourceid/rg-init-db/init-data.sh"

  - name: 修改数据库连接参数
    replace: path="{{ mongodb_init_dir }}/sourceid/rg-upgrade-db/upgrade_data.sh" regexp="^\\s*mongo\\s+" replace="mongo {{ mongo_auth_param }} "
    when: 'db_script_version < "2"'

  - name: 修改数据库连接参数2
    replace: path="{{ mongodb_init_dir }}/{{ item }}" regexp="^\\s*mongoimport\\s+" replace="mongoimport {{ mongo_auth_param }} "
    when: 'mongodb_auth_mode == "yes"'
    with_items:
      - "sourceid/rg-init-db/init-data.sh"

  - name: 设置文件执行权限
    file: name="{{ item }}" mode=0700
    with_items:
    - "{{ mongodb_init_dir }}/init-data.sh"
    - "{{ mongodb_init_dir }}/sourceid/rg-init-db/init-data.sh"
    - "{{ mongodb_init_dir }}/sourceid/rg-upgrade-db/upgrade_data.sh"
    - "{{ mongodb_init_dir }}/sourceid/rg-upgrade-db/function_switch.sh"

  - name: 查询数据初始化状态
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("cas").runCommand({find:"cas-service-registry", filter: {clientId: "OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w"}})'''
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 执行初始化脚本
    shell: '{{ mongo_pod_shell }} /ruijie/init/init-data.sh'
    when: '"OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w" not in mongo_result.stdout'
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 查询数据初始化状态
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("cas").runCommand({find:"cas-service-registry", filter: {clientId: "OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w"}})'''
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 修改域名
    vars:
      serviceId: '(http|https)://{{ SOURCEID_GATE_DOMAIN }}.*'
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("cas").runCommand({update:"cas-service-registry", updates:[{q:{clientId:"OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w"}, u:{$set:{"serviceId":"{{ serviceId }}", "logoutUrl":"{{ SOURCEID_FRONTEND_URL }}/logout"}}}]})'''
    when: 'SOURCEID_FRONTEND_URL not in mongo_result.stdout'
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 查询数据库SYSTEM_VERSION中保存的组件数据库版本
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("admin").getCollection("SYSTEM_VERSION").find({"_id":"DB_VERSION"})'''
    register: db_version
    failed_when: 'db_version.stdout is search(mongo_shell_fail_pattern) and db_version.stdout is not search(mongo_shell_success_pattern)' 
    connection: local
    
  - name: SYSTEM_VERSION表中新增组件数据库版本记录
    shell: '{{ mongo_shell }}  --eval ''db.getSiblingDB("admin").getCollection("SYSTEM_VERSION").insert({"_id":"DB_VERSION"})'''
    when: '"DB_VERSION" not in db_version.stdout'
    connection: local

  - name: 新增组件对应的数据库版本初始化
    vars:
      comp_name: "{{ item }}"
      db_name: "{{ comp_name }}_version"
    shell: '{{ mongo_shell }}  --eval ''db.getSiblingDB("admin").runCommand({"findAndModify":"SYSTEM_VERSION","query":{"_id":"DB_VERSION"},"update":{"$set":{"{{ db_name }}":"R0.0"}},"new":true})'''
    when: 'db_name not in db_version.stdout'
    with_items:
      - "cas"
      - "linkid-dev"
      - "gate"
      - "gateway"
      - "faceid"
      - "groupview"
      - "log"
      - "ztsync"
      - "mdm"
      - "dop"
      - "career-event"
      - "xxl-job"
      - "internet-id"
      - "report"
      - "organization-center"
      - "rg-flow"
      - "address-book"
      - "freeradius"
    connection: local

  - name: 查询数据库SYSTEM_VERSION中保存的组件数据库版本
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("admin").getCollection("SYSTEM_VERSION").find({"_id":"DB_VERSION"})'''
    register: db_version
    failed_when: 'db_version.stdout is search(mongo_shell_fail_pattern) and db_version.stdout is not search(mongo_shell_success_pattern)' 
    connection: local

  - name: 准备升级数据的脚本
    vars:
      current_db_version: '{% if db_version.stdout is defined %}{{db_version.stdout_lines|last|from_json}}{% endif%}'
      src_file: update-data.sh.j2
    template: src="{{ src_file }}" dest="{{ mongodb_init_dir }}/update-data.sh"
  
  - name: 准备功能开启/关闭脚本
    template: src="function-switch.sh.j2" dest="{{ mongodb_init_dir }}/function-switch.sh"


  - name: 设置升级脚本文件执行权限
    file: name="{{ item }}" mode=0700
    with_items:
    - "{{ mongodb_init_dir }}/update-data.sh"
    - "{{ mongodb_init_dir }}/function-switch.sh"

  - name: 查询数据初始化状态
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("cas").runCommand({find:"cas-service-registry", filter: {clientId: "OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w"}})'''
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 清理历史mongo日志
    shell: '{{ mongo_pod_shell }} rm /ruijie/init/sourceid/rg-upgrade-db/update.log -rf'
    connection: local

  - name: 执行升级脚本
    shell: '{{ mongo_pod_shell }} /ruijie/init/update-data.sh'
    when: '"OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w" in mongo_result.stdout'
    connection: local

  - name: 查看执行结果
    shell: '{{ mongo_pod_shell }} cat /ruijie/init/sourceid/rg-upgrade-db/update.log | grep Error'
    register: mongo_result
    failed_when: 'mongo_result.stdout is search("Error") '
    connection: local

  - name: 执行功能开启/关闭脚本
    shell: '{{ mongo_pod_shell }} /ruijie/init/function-switch.sh'
    register: function_result
    failed_when: 'function_result.stdout is search(mongo_shell_fail_pattern) and function_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 保存数据库版本到SYSTEM_VERSION表中
    vars:
      comp_name: "{{ item }}"
      db_name: "{{ DB_VERSION[comp_name].name }}_version"
      db_cur_version: "{{ DB_VERSION[comp_name].version }}"
    shell: '{{ mongo_shell }}  --eval ''db.getSiblingDB("admin").runCommand({"findAndModify":"SYSTEM_VERSION","query":{"_id":"DB_VERSION"},"update":{"$set":{"{{ db_name }}":"{{ db_cur_version }}"}},"new":true})'''
    with_items: "{{ DB_VERSION.keys() }}"
    when: "DB_VERSION is defined"
    connection: local

  - name: 保存组件数据库版本到SYSTEM_VERSION表中
    vars:
      comp_name: "{{ item }}"
      db_name: "{{ comp_name }}_version"
    shell: '{{ mongo_shell }}  --eval ''db.getSiblingDB("admin").runCommand({"findAndModify":"SYSTEM_VERSION","query":{"_id":"DB_VERSION"},"update":{"$set":{"{{ db_name }}":"{{ SOURCEID_DB_VERSION }}"}},"new":true})'''
    when: 'DB_VERSION is not defined '
    with_items:
      - "cas"
      - "linkid-dev"
      - "gate"
      - "gateway"
      - "faceid"
    connection: local

  - name: 初始化数据库用户
    shell: "{{ mongo_shell }} /ruijie/init/create-users.js"
    register: mongo_creat_update_result
    failed_when: 'mongo_creat_update_result.stdout is search(mongo_shell_fail_pattern) and mongo_creat_update_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local
    no_log: true

  - name: 更新数据库用户
    shell: "{{ mongo_shell }} /ruijie/init/update-users.js"
    register: mongo_update_result
    failed_when: 'mongo_update_result.stdout is search(mongo_shell_fail_pattern) and mongo_update_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local
    no_log: true
  when: 'inventory_hostname == groups.mongodb[0]'
