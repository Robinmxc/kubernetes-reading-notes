- name: 检查数据库账号
  fail: msg="数据库账号{{ item.user_param_name }}不符合要求，{{ db_user_invalid_msg }}"
  when: 'item.user is not search(db_user_pattern)'
  connection: local
  run_once: true
  with_items: "{{ db_pwd_checklist }}"

# - name: 检查数据库密码
#   fail: msg="数据库密码{{ item.pwd_param_name }}不符合要求，{{ db_pwd_invalid_msg }}"
#   when: '"" != item.pwd and (item.pwd is not search(db_pwd_pattern1) or item.pwd is not search(db_pwd_pattern2))'
#   connection: local
#   run_once: true
#   with_items: "{{ db_pwd_checklist }}"

- block:
  - name: 准备初始化文件
    template: src="{{ item }}.j2" dest="{{ mongodb_init_dir }}/{{ item }}"
    with_items:
    - create-users.js
    - init-data.sh

  - name: 压缩数据初始化脚本
    archive:
      path: "{{ sourceid_kad_temp_dir }}/db/"
      dest: "{{ sourceid_kad_temp_dir }}/data.tgz"
    connection: local
    run_once: true

  - name: 复制数据初始化脚本
    copy: src="{{ sourceid_kad_temp_dir }}/data.tgz" dest="{{ mongodb_init_dir }}/"

  - name: 解压数据初始化脚本
    unarchive:
      src: "{{ mongodb_init_dir }}/data.tgz"
      dest: "{{ mongodb_init_dir }}/"
      remote_src: yes

  - name: 修改数据库连接参数
    replace: path="{{ mongodb_init_dir }}/{{ item }}" regexp="^\\s*mongo\\s+" replace="mongo {{ mongo_auth_param }} "
    when: 'mongodb_auth_mode == "yes"'
    with_items:
      - "sourceid/rg-init-db/init-data.sh"
      - "sourceid/rg-upgrade-db/upgrade_data.sh"
      - "component/rg-init-db/init-data.sh"
      - "component/rg-init-db/upgrade_data.sh"

  - name: 修改数据库连接参数2
    replace: path="{{ mongodb_init_dir }}/{{ item }}" regexp="^\\s*mongoimport\\s+" replace="mongoimport {{ mongo_auth_param }} "
    when: 'mongodb_auth_mode == "yes"'
    with_items:
      - "sourceid/rg-init-db/init-data.sh"
      - "sourceid/rg-upgrade-db/upgrade_data.sh"
      - "component/rg-init-db/init-data.sh"
      - "component/rg-init-db/upgrade_data.sh"

  - name: 设置文件执行权限
    file: name="{{ item }}" mode=0700
    with_items:
    - "{{ mongodb_init_dir }}/init-data.sh"
    - "{{ mongodb_init_dir }}/sourceid/rg-init-db/init-data.sh"
    - "{{ mongodb_init_dir }}/sourceid/rg-upgrade-db/upgrade_data.sh"
    - "{{ mongodb_init_dir }}/component/rg-init-db/init-data.sh"
    - "{{ mongodb_init_dir }}/component/rg-init-db/upgrade_data.sh"

  - name: 获取mongo1 POD 名称
    shell: "{{ bin_dir }}/kubectl get pod -n {{ APP_NAMESPACE }} -o custom-columns=NAME:.metadata.name | grep mongo1"
    register: pod_name
    connection: local

  - name: set vars
    set_fact:
      pod_shell: "{{ bin_dir }}/kubectl exec -n {{ APP_NAMESPACE }} {{ pod_name.stdout }} -- "
      mongo_shell: "{{ bin_dir }}/kubectl exec -n {{ APP_NAMESPACE }} {{ pod_name.stdout }} -- mongo {{ mongo_auth_param }}"
    connection: local

  - name: 查询数据初始化状态
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("cas").runCommand({find:"cas-service-registry", filter: {clientId: "OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w"}})'''
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 执行初始化脚本
    shell: '{{ pod_shell }} /ruijie/init/init-data.sh'
    when: '"OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w" not in mongo_result.stdout'
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 查询数据初始化状态
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("cas").runCommand({find:"cas-service-registry", filter: {clientId: "OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w"}})'''
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 修改域名
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("cas").runCommand({update:"cas-service-registry", updates:[{q:{clientId:"OC4wNS4wNS4wNy4wMC4wMy4wMS4wMS4w"}, u:{$set:{"serviceId":"http://{{ SOURCEID_GATE_DOMAIN }}.*", "logoutUrl":"http://{{ SOURCEID_GATE_DOMAIN }}/logout"}}}]})'''
    when: 'SOURCEID_GATE_DOMAIN not in mongo_result.stdout'
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 查询用户状态
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("cas").runCommand({usersInfo: "cas"})'''
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local

  - name: 初始化数据库用户
    shell: "{{ mongo_shell }} /ruijie/init/create-users.js"
    when: '"cas" not in mongo_result.stdout'
    register: mongo_result
    failed_when: 'mongo_result.stdout is search(mongo_shell_fail_pattern) and mongo_result.stdout is not search(mongo_shell_success_pattern)'
    connection: local
    no_log: '{{ SOURCEID_DEPLOY_PROFILE=="prd" }}'

  when: 'inventory_hostname == groups.mongodb[0]'
