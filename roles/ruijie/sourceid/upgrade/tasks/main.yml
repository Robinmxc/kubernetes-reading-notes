- block:
  - name: 读取kad文件
    shell: 'cat {{KAD_PACKAGE_DIR}}/kad.yml'
    register: kad_content
    connection: local

  - name: 查找需要升级的db版本号
    shell: |-
      grep "SOURCEID_DB_VERSION:*" {{KAD_PACKAGE_DIR}}/kad.yml | awk -F ":" '{print $2}' | awk '{gsub(/^\s+|\s+$/, "");print}' | awk -F "\"" '{print $2}'
    register: sid_version
    when: '"SOURCEID_DB_VERSION" in kad_content.stdout'
    connection: local

  - name: 轮询等待mongodb运行
    shell: "kubectl get pod -n {{ APP_NAMESPACE }} | grep 'mongo1' | awk '{print $3}'"
    register: pod_status
    until: pod_status.stdout == "Running"
    connection: local
    run_once: true
    retries: 12
    delay: 5
    ignore_errors: true
    
  - name: 查询数据库SYSTEM_VERSION中保存的组件数据库版本
    shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("admin").getCollection("SYSTEM_VERSION").find({"_id":"DB_VERSION"})'''
    register: db_version
    failed_when: 'db_version.stdout is search(mongo_shell_fail_pattern) and db_version.stdout is not search(mongo_shell_success_pattern)' 
    connection: local

  - name: SYSTEM_VERSION表中新增组件数据库版本记录
    shell: '{{ mongo_shell }}  --eval ''db.getSiblingDB("admin").getCollection("SYSTEM_VERSION").insert({"_id":"DB_VERSION"})'''
    when: '"DB_VERSION" not in db_version.stdout'
    connection: local

  - name: 保存当前数据库版本到SYSTEM_VERSION表中
    shell: '{{ mongo_shell }}  --eval ''db.getSiblingDB("admin").runCommand({"findAndModify":"SYSTEM_VERSION","query":{"_id":"DB_VERSION"},"update":{"$set":{"{{ item }}_version":"{{ sid_version.stdout }}"}},"new":true})'''
    when: '"SOURCEID_DB_VERSION" in kad_content.stdout'
    with_items:
      - "cas"
      - "linkid-dev"
      - "gate"
      - "gateway"
      - "faceid"
    connection: local

  - name: 删除历史备份
    file:
      path: "{{BAK_DIR}}_history"
      state: absent
    connection: local

  - name: 准备备份目录
    file: path={{ item }} state=directory
    with_items:
      - "{{BAK_DIR}}"
    connection: local

  - name: 备份备份
    copy:
      src: "{{BAK_DIR}}"
      dest: "{{BAK_DIR}}_history"
    connection: local

  - name: 删除备份
    file:
      path: "{{BAK_DIR}}"
      state: absent
    connection: local

  - name: 准备备份目录
    file: path={{ item }} state=directory
    with_items:
      - "{{BAK_DIR}}"
      - "{{BAK_DIR}}/workspace"
      - "{{BAK_DIR}}/mongodbbak"
      - "{{BAK_DIR}}/dockerimages"
    connection: local

  - name: 备份kadworkspace
    copy:
      src: "{{ base_dir }}/workspace/"
      dest: "{{BAK_DIR}}/workspace/"
    connection: local

  - name: 备份标准组件docker镜像
    shell: "docker save {{ docker_images }} -o {{BAK_DIR}}/dockerimages/dockerimages.tar"
    ignore_errors: true
    connection: local

  - name: 准备backup目录
    file: path="{{ mongodb_backup_dir }}" state=directory
    connection: local 
    


  - name: bak mongodb
    shell: "mongodump -h {{ groups.mongodb[0] }} -u {{ MONGODB_ADMIN_USER }} -p {{ MONGODB_ADMIN_PWD }} --authenticationDatabase 'admin' -o {{BAK_DIR}}/mongodbbak"
    register: shell_result
    connection: local

  - name: 替换kad
    shell: "\\cp -rpf {{UPGRADE_DIR}}/kad/* {{base_dir}}"
    connection: local
    
  - name: 拷贝SourceID配置文件中不存在的配置文件
    vars:
      src_path: "{{UPGRADE_DIR}}/kad/down/{{KAD_UPGRADE_PACKAGE_NAME}}/conf/{{ item }}"
      dest_path: "{{ base_dir }}/workspace/{{ APP_NAMESPACE }}/conf/{{ item }}"
    copy: src="{{ src_path }}/" dest="{{ dest_path }}/"
    when: 'src_path is exists and dest_path is not exists'
    with_items:
      - "sourceid/sso"
      - "sourceid/gate"
      - "sourceid/linkid"
      - "sourceid/frontend"
      - "sourceid/license"
      - "sourceid/faceid"
      - "sourceid/faceid-display"
      - "sourceid/gateway"
      - "sourceid/import-user"
      - "sourceid/data-sync"
      - "sourceid/security"
      - "sourceid/convert"
      - "sourceid/fgm-backend"
      - "sourceid/groupview"
      - "sourceid/faceid-task"
      - "sourceid/log"
      - "sourceid/internetid"
      - "sourceid/ztsync"
      - "sourceid/collect"
      - "sourceid/adapter"
      - "sourceid/dop"
      - "sourceid/mdm"
      - "sourceid/career-event"
      - "sourceid/xxl-job"
      - "sourceid/portal"
      - "sourceid/report"
      - "sourceid/organization-center"
      - "sourceid/rg-flow"
      - "sourceid/address-book"
      - "sourceid/auth-extend"
    connection: local

  - name: 配置文件自动比对、同步
    vars:
      new_path: "{{UPGRADE_DIR}}/kad/down/{{KAD_UPGRADE_PACKAGE_NAME}}/conf/sourceid"
      old_path: "{{ base_dir }}/workspace/{{ APP_NAMESPACE }}/conf/sourceid"
    shell: "sh /opt/kad/compare/sid-config-compare.sh {{ old_path }} {{ new_path }} /opt/kad/compare/compare.log"
    connection: local

  - name: kad.yml 自动比对、同步
    shell: "python3 /opt/kad/compare/compare_kad_yml.py {{ KAD_APP_VERSION }} /opt/kad/compare/compare.log"
    connection: local

  - name: 获取所有已经创建的POD信息
    command: "kubectl get pod -n {{ APP_NAMESPACE }}"
    register: pod_info
    connection: local

  - name: 停止mongo1
    command: "kubectl delete -f {{ yaml_dir }}/mongo/mongo1.yml"
    when: '"mongo1" in pod_info.stdout'
    connection: local
  
  - name: 停止mongo2
    command: "kubectl delete -f {{ yaml_dir }}/mongo/mongo2.yml"
    when: '"mongo2" in pod_info.stdout'
    connection: local

  - name: 停止mongo3
    command: "kubectl delete -f {{ yaml_dir }}/mongo/mongo3.yml"
    when: '"mongo3" in pod_info.stdout'
    connection: local

  - name: 获取pgsql POD 名称
    shell: "kubectl get pod -n {{ APP_NAMESPACE }} -o custom-columns=NAME:.metadata.name | grep postgresql"
    register: shell_result
    connection: local

  - name: 设置pgsql shell
    set_fact:
      pgsql_dump_shell: "kubectl exec -n {{ APP_NAMESPACE }} {{ shell_result.stdout }} -- pg_dump -U postgres "
      pgsql_pod_shell: "kubectl exec -n {{ APP_NAMESPACE }} {{ shell_result.stdout }} -- psql -U postgres "
    connection: local

  - name: 查询pgsql 是否已初始化
    shell: '{{ pgsql_pod_shell }} -c "\l"'
    register: table_result
    connection: local

  - name: 导出quartz数据库数据
    shell: '{{ pgsql_dump_shell }} quartz > {{ KAD_PACKAGE_DIR }}/db/sourceid/rg-init-db/init.sql'
    when: '"xxl_job" not in table_result.stdout'
    connection: local
    
  - name: 停止postgres数据库
    shell: 'kubectl delete -f {{ yaml_dir }}/pgsql/pgsql.yml'
    when: '"postgresql" in pod_info.stdout'
    connection: local

  - name: 删除postgres数据目录
    file:
      path: "{{ pgsql_data_dir }}"
      state: absent
    when: '"xxl_job" not in table_result.stdout'
    delegate_to: "{{ groups.pgsql[0] }}"

  when: 'inventory_hostname == groups.kube_master[0]'
