#数据库脚本压缩、复制、解压、脚本执行  
- name: 更换脚本域名
  block:
  - name: 设置文件权限
    vars:
      src_file: "{{ KAD_PACKAGE_DIR }}-hotfix/db/sourceid-hotfix/sourceid-university/rg-upgrade-db/update_domain2.sh"
    when: 'src_file is exists'
    shell: "chmod +777 {{ KAD_PACKAGE_DIR }}-hotfix/db/sourceid-hotfix/sourceid-university/rg-upgrade-db/update_domain2.sh"
    connection: local
    run_once: true

  - name: 执行替换脚本
    vars:
      SSO_DOMAIN_URL: '{% if SOURCEID_DOMAIN_MODE == "single" %}{{ SOURCEID_SSO_URL }}/cas{% else %}{{ SOURCEID_SSO_URL }}{% endif %}'
      GATE_DOMAIN_URL: '{{ SOURCEID_FRONTEND_URL }}'
      src_file: "{{ KAD_PACKAGE_DIR }}-hotfix/db/sourceid-hotfix/sourceid-university/rg-upgrade-db/update_domain2.sh"
    when: 'src_file is exists'
    shell: "{{ KAD_PACKAGE_DIR }}-hotfix/db/sourceid-hotfix/sourceid-university/rg-upgrade-db/update_domain2.sh {{ GATE_DOMAIN_URL }} {{ SSO_DOMAIN_URL }} {{ KAD_PACKAGE_DIR }}"
    connection: local
    run_once: true

- name: 压缩数据初始化脚本
  archive:
    path: "{{ KAD_PACKAGE_DIR }}-hotfix/db/"
    dest: "{{ temp_dir }}/{{ KAD_PACKAGE_NAME }}-data.tgz"
  connection: local
  run_once: true

- name: 压缩数据初始化脚本
  archive:
    path: "{{ KAD_PACKAGE_DIR }}-hotfix/db/sourceid-hotfix/sourceid-university/"
    dest: "{{ temp_dir }}/{{ KAD_PACKAGE_NAME }}-data1.tgz"
  connection: local
  run_once: true

- name: 复制数据初始化脚本
  copy: src="{{ temp_dir }}/{{ KAD_PACKAGE_NAME }}-data1.tgz" dest="{{ KAD_PACKAGE_DIR }}/db/sourceid/data1.tgz"
  connection: local
  run_once: true

- name: 解压数据初始化脚本
  unarchive:
    src: "{{ KAD_PACKAGE_DIR }}/db/sourceid/data1.tgz"
    dest: "{{ KAD_PACKAGE_DIR }}/db/sourceid/"
    remote_src: yes
  connection: local
  run_once: true

- name: 准备init目录
  tags:
  - config
  file: path="{{ item }}" state=directory
  with_items:
  - "{{ pgsql_init_dir }}"
  - "{{ mongodb_init_dir }}"

- name: 复制数据初始化脚本
  copy: src="{{ temp_dir }}/{{ KAD_PACKAGE_NAME }}-data.tgz" dest="{{ pgsql_init_dir }}/data.tgz"
  
- name: 复制数据初始化脚本
  copy: src="{{ temp_dir }}/{{ KAD_PACKAGE_NAME }}-data.tgz" dest="{{ mongodb_init_dir }}/data.tgz"

- name: 解压数据初始化脚本
  unarchive:
    src: "{{ pgsql_init_dir }}/data.tgz"
    dest: "{{ pgsql_init_dir }}/"
    remote_src: yes

- name: 解压数据初始化脚本
  unarchive:
    src: "{{ mongodb_init_dir }}/data.tgz"
    dest: "{{ mongodb_init_dir }}/"
    remote_src: yes

- name: 获取mongo1 POD 名称
  shell: "kubectl get pod -n {{ APP_NAMESPACE }} -o custom-columns=NAME:.metadata.name | grep mongo1"
  register: shell_result
  connection: local
  run_once: true

- name: set vars
  set_fact:
    mongo_pod_name: "{{ shell_result.stdout }}"
    mongo_pod_shell: "kubectl exec -n {{ APP_NAMESPACE }} {{ shell_result.stdout }} -- "
    mongo_shell: "kubectl exec -n {{ APP_NAMESPACE }} {{ shell_result.stdout }} -- mongo {{ mongo_auth_param }}"
  connection: local
  run_once: true

- name: 查询数据库SYSTEM_VERSION中保存的组件数据库版本
  shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("admin").getCollection("SYSTEM_VERSION").find({"_id":"DB_VERSION"})'''
  register: db_version
  failed_when: 'db_version.stdout is search(mongo_shell_fail_pattern) and db_version.stdout is not search(mongo_shell_success_pattern)' 
  connection: local

- name: SYSTEM_VERSION表中新增组件数据库版本记录
  shell: '{{ mongo_shell }}  --eval ''db.getSiblingDB("admin").getCollection("SYSTEM_VERSION").insert({"_id":"DB_VERSION"})'''
  when: '"DB_VERSION" not in db_version.stdout'
  connection: local

- name: 新增组件对应的数据库版本初始化
  vars:
    comp_name: "{{ item }}"
    db_name: "{{ comp_name }}_version"
  shell: '{{ mongo_shell }}  --eval ''db.getSiblingDB("admin").runCommand({"findAndModify":"SYSTEM_VERSION","query":{"_id":"DB_VERSION"},"update":{"$set":{"{{ db_name }}":"R0.0"}},"new":true})'''
  when: 'db_name not in db_version.stdout'
  with_items:
    - "cas"
    - "linkid-dev"
    - "gate"
    - "gateway"
    - "faceid"
    - "groupview"
    - "log"
    - "ztsync"
    - "mdm"
    - "dop"
    - "career-event"
    - "xxl-job"
    - "internet-id"
    - "report"
    - "organization-center"
    - "rg-flow"
    - "address-book"
    - "ess"
    - "application-facade"
    - "license"
    - "sso-proxy"
  connection: local

- name: 查询数据库SYSTEM_VERSION中保存的组件数据库版本
  shell: '{{ mongo_shell }} --eval ''db.getSiblingDB("admin").getCollection("SYSTEM_VERSION").find({"_id":"DB_VERSION"})'''
  register: db_version
  failed_when: 'db_version.stdout is search(mongo_shell_fail_pattern) and db_version.stdout is not search(mongo_shell_success_pattern)' 
  connection: local

- name: 准备升级数据的脚本
  vars:
    current_db_version: '{% if db_version.stdout is defined %}{{db_version.stdout_lines|last|from_json}}{% endif%}'
    src_file: mongo-hotfix.sh.j2
  template: src="{{ src_file }}" dest="{{ mongodb_init_dir }}/mongo-hotfix.sh"

- name: 设置升级脚本文件执行权限
  file: name="{{ item }}" mode=0700
  with_items:
  - "{{ mongodb_init_dir }}/mongo-hotfix.sh"


- name: 清理历史mongo日志
  shell: '{{ mongo_pod_shell }} rm /ruijie/init/sourceid-hotfix/sourceid-university/rg-upgrade-db/update.log -rf'
  connection: local
  run_once: true

- name: 执行升级脚本
  shell: '{{ mongo_pod_shell }} /ruijie/init/mongo-hotfix.sh'
  connection: local
  run_once: true

- name: 查看执行结果
  shell: '{{ mongo_pod_shell }} cat /ruijie/init/sourceid-hotfix/sourceid-university/rg-upgrade-db/update.log | grep Error'
  register: mongo_result
  failed_when: 'mongo_result.stdout is search("Error") '
  connection: local

#执行pg升级脚本

- name: 获取pgsql POD 名称
  shell: "kubectl get pod -n {{ APP_NAMESPACE }} -o custom-columns=NAME:.metadata.name | grep postgresql"
  register: shell_result
  connection: local
  run_once: true

- name: 设置pgsql shell
  set_fact:
    pgsql_pod_name: "{{ shell_result.stdout }}"
    pgsql_shell: "kubectl exec -n {{ APP_NAMESPACE }} {{ shell_result.stdout }} -- "
    pgsql_pod_shell: "kubectl exec -n {{ APP_NAMESPACE }} {{ shell_result.stdout }} -- psql -U postgres "
  connection: local
  run_once: true

- name: 查询pgsql 是否已初始化
  shell: '{{ pgsql_pod_shell }} -c "\l"'
  register: db_result
  connection: local
  run_once: true

- name: 创建essdb数据库
  shell: '{{ pgsql_pod_shell }} -c "CREATE DATABASE essdb"'
  when: '"essdb" not in db_result.stdout'
  register: create_result
  failed_when: 'create_result.stdout is not search("CREATE DATABASE")'
  connection: local
  run_once: true
   
- name: 准备升级数据的脚本
  vars:
    src_file: pg-hotfix.sh.j2
  template: src="{{ src_file }}" dest="{{ pgsql_init_dir }}/pg-hotfix.sh"

- name: 设置升级脚本文件执行权限
  file: name="{{ item }}" mode=0700
  with_items:
  - "{{ pgsql_init_dir }}/pg-hotfix.sh"
  - "{{ pgsql_init_dir }}/sourceid-hotfix/sourceid-university/rg-upgrade-db/upgrade_pg.sh"


- name: 执行升级脚本
  shell: '{{ pgsql_shell }} /ruijie/init/pg-hotfix.sh'
  register: pg_result
  connection: local
  run_once: true