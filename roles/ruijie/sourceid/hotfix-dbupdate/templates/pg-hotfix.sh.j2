#!/bin/bash




dirname=(rg-upgrade-db rg-upgrade-db-{{ INDUSTRY_TYPE }})
for dir in ${dirname[@]};
do

cd /ruijie/init/sourceid-hotfix/sourceid-university/${dir}/

touch updatedb.log


if [ -d  ./xxl-job_upgrade_db/sourceid/DBVERSIONUPGRADE ]; then

psql -U postgres  -Aqtc "create table if not exists filename_record (id SERIAL PRIMARY KEY, filename varchar(500),time timestamp,result varchar(500));"

  errorinfo=$(grep "ERROR" updatedb.log)

  if [[ ${errorinfo} =~ "ERROR" ]]
  then
        exit
  fi


need=$(ls ./xxl-job_upgrade_db/sourceid/DBVERSIONUPGRADE/ | grep sql |wc -l)
if [ "${need}" != "0" ] ; then

dbfilepath1=$(ls ./xxl-job_upgrade_db/sourceid/DBVERSIONUPGRADE)
dbfilepathNew1=(${dbfilepath1//\\n/ })
{% raw %}
for((j=0;j<${#dbfilepathNew1[*]};j++))
{% endraw %}
do

cc=$(psql -U postgres  -Aqtc "select count(filename) from filename_record where filename = '${dir}/xxl-job_upgrade_db/sourceid/DBVERSIONUPGRADE/${dbfilepathNew1[j]}'")  

if [ $cc -gt 0 ]
then
   echo "${dir}/xxl-job_upgrade_db/sourceid/DBVERSIONUPGRADE/${dbfilepathNew1[j]}记录已存在"
else
   echo "${dir}/xxl-job_upgrade_db/sourceid/DBVERSIONUPGRADE/${dbfilepathNew1[j]}无记录"  

   

   tt=$(psql -U postgres -d xxl_job -Aqtf  ./xxl-job_upgrade_db/sourceid/DBVERSIONUPGRADE/${dbfilepathNew1[j]})

   dd=$(echo $tt | sed 's/\"//g' | awk '{gsub(/^\s+|\s+$/, "");print}')

    errorinfo1=$(echo $dd | grep "ERROR")

    if [[ ${errorinfo1} =~ "ERROR" ]]
    then
            echo $dd >> updatedb.log
            exit
    else
           psql -U postgres  -Aqtc "insert into filename_record(filename,time,result)values('${dir}/xxl-job_upgrade_db/sourceid/DBVERSIONUPGRADE/${dbfilepathNew1[j]}',now(),'${dd}')"
     
    fi   


fi

done

fi

fi


if [ -d  ./rg-flow_upgrade_db/sourceid/DBVERSIONUPGRADE ]; then

psql -U postgres  -Aqtc "create table if not exists filename_record (id SERIAL PRIMARY KEY, filename varchar(500),time timestamp,result varchar(500));"

  errorinfo=$(grep "ERROR" updatedb.log)

  if [[ ${errorinfo} =~ "ERROR" ]]
  then
        exit
  fi


need=$(ls ./rg-flow_upgrade_db/sourceid/DBVERSIONUPGRADE/ | grep sql |wc -l)
if [ "${need}" != "0" ] ; then

dbfilepath1=$(ls ./rg-flow_upgrade_db/sourceid/DBVERSIONUPGRADE)
dbfilepathNew1=(${dbfilepath1//\\n/ })
{% raw %}
for((j=0;j<${#dbfilepathNew1[*]};j++))
{% endraw %}
do

cc=$(psql -U postgres  -Aqtc "select count(filename) from filename_record where filename = '${dir}/rg-flow_upgrade_db/sourceid/DBVERSIONUPGRADE/${dbfilepathNew1[j]}'")  
if [ $cc -gt 0 ]
then
   echo "${dir}/rg-flow_upgrade_db/sourceid/DBVERSIONUPGRADE/${dbfilepathNew1[j]}记录已存在"
else
   echo "${dir}/rg-flow_upgrade_db/sourceid/DBVERSIONUPGRADE/${dbfilepathNew1[j]}无记录"  

   

   tt=$(psql -U postgres -d flowable  -Aqtf  ./rg-flow_upgrade_db/sourceid/DBVERSIONUPGRADE/${dbfilepathNew1[j]})

   dd=$(echo $tt | sed 's/\"//g' | awk '{gsub(/^\s+|\s+$/, "");print}')

    errorinfo1=$(echo $dd | grep "ERROR")

    if [[ ${errorinfo1} =~ "ERROR" ]]
    then
            echo $dd >> updatedb.log
            exit
    else
          psql -U postgres  -Aqtc "insert into filename_record(filename,time,result)values('${dir}/rg-flow_upgrade_db/sourceid/DBVERSIONUPGRADE/${dbfilepathNew1[j]}',now(),'${dd}')" 

    fi   


fi

done

fi

fi






done