- name: 获取所有已经创建的POD信息
  command: "kubectl get pod -n {{ APP_NAMESPACE }}"
  register: pod_info
  run_once: true
  connection: local

- name: 部署
  when: '"openldap" not in pod_info.stdout'
  block:
  - name: 准备LDAP存储目录
    file: path={{ item }} state=directory
    with_items:
      - "{{ ldap_base_dir }}/conf"
      - "{{ ldap_base_dir }}/data"
      - "{{ ldap_base_dir }}/certs"

  - name: 准备镜像复制目录
    file: path={{ item }} state=directory
    with_items:
      - "{{ img_copy_dir }}"

  - name: 获取镜像文件状态
    stat: path="{{ ldap_image_file }}"
    register: stat_result

  - name: 获取docker已加载的镜像信息
    command: "docker images --format ''{{ '{{' }}.Repository{{ '}}' }}:{{ '{{' }}.Tag{{ '}}' }}''"
    register: imgages_info

  - name: 复制镜像文件
    copy: src={{ LDAP_DOWN_PATH }}/{{ ldap_image_file }} dest={{ img_copy_dir }}/{{ ldap_image_file }}
    when: 'not stat_result.stat.exists and ldap_image_name_tag not in imgages_info.stdout'

  - name: 加载镜像
    command: 'docker load -i {{ img_copy_dir }}/{{ ldap_image_file }}'
    when: 'ldap_image_name_tag not in imgages_info.stdout'

  - name: 获取secret数据
    command: "kubectl get secret -n {{ APP_NAMESPACE }}"
    register: secret_info
    connection: local
    run_once: true

  - name: 准备密码
    shell: "kubectl create secret generic -n {{ APP_NAMESPACE }} ldap-pwds --from-literal=admin={{ LDAP.LDAP_ADMIN_PWD }} --from-literal=readonly={{ LDAP.LDAP_READONLY_PWD }}"
    when: '"ldap-pwds" not in secret_info.stdout'
    no_log: true
    connection: local
    run_once: true

  - name: 准备部署文件目录
    file: path={{ item }} state=directory
    with_items:
      - "{{ yaml_dir }}/openldap"
    run_once: true
    connection: local

  - name: 准备部署文件
    vars:
      ldap_node_ip: "{{ groups.ldap[0] }}" 
    template: src='openldap.yml.j2' dest={{ yaml_dir }}/openldap/openldap.yml
    run_once: true
    connection: local

  - name: 执行部署
    shell: "kubectl apply -f {{ yaml_dir }}/openldap/"
    run_once: true
    connection: local

  - name: 轮询等待LDAP运行
    shell: "kubectl get pod -n {{ APP_NAMESPACE }} | grep 'openldap' | awk '{print $3}'"
    register: pod_status
    until: pod_status.stdout == "Running"
    connection: local
    run_once: true
    retries: 12
    delay: 5
    ignore_errors: true
