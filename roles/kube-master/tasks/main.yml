- name: 开机启用kubelet 服务
  shell: systemctl enable kubelet
  ignore_errors: true

- name: 修改kubelet对应的cgroupDriver
  shell: "grep cgroup-driver=cgroupfs /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf >> /dev/null; \
          if [ $? -ne 0 ]; \
          then sed -i \"s#--kubeconfig=/etc/kubernetes/kubelet.conf#--kubeconfig=/etc/kubernetes/kubelet.conf --cgroup-driver=cgroupfs#g\" /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf; \
          fi;"
  tags: upgrade_k8s

- name: 创建master镜像目录
  file: name={{ item }} state=directory
  with_items:
  - /opt/kube/images

- name: 拷贝k8s基础镜像到master节点
  copy: src={{ base_dir }}/down/{{ item }} dest=/opt/kube/images/{{ item }}
  with_items:
  - "{{ kube_apiserver }}"
  - "{{ kube_proxy }}"
  - "{{ kube_scheduler }}"
  - "{{ kube_controller_manager }}"
  - "{{ etcd }}"
  - "{{ coredns }}"
  - "{{ pause }}"


- name: 加载kubernetes镜像包
  shell: "docker load -i /opt/kube/images/{{ item }}"
  with_items:
  - "{{ kube_apiserver }}"
  - "{{ kube_proxy }}"
  - "{{ kube_scheduler }}"
  - "{{ kube_controller_manager }}"
  - "{{ etcd }}"
  - "{{ coredns }}"
  - "{{ pause }}"

- name: 配置 kubeadm文件 
  template: src=kubeadm.yaml.j2 dest=/etc/kubeadm.yaml
  connection: local
  run_once: true
  tags: restart_master

- name: 通过kubeadm安装并启动kubernetes
  shell: 'kubeadm init   --upload-certs --config=/etc/kubeadm.yaml; \
          mkdir -p $HOME/.kube; \
          sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config; \
          sudo chown $(id -u):$(id -g) $HOME/.kube/config; \
          export KUBECONFIG=/etc/kubernetes/admin.conf'
  connection: local
  run_once: true
  tags: upgrade_k8s

- name: 以轮询的方式等待master服务启动完成
  command: "kubectl get node"
  register: result
  until:    result.rc == 0
  retries:  10
  delay: 10
  delegate_to: "{{ groups.deploy[0] }}"
  connection: local
  run_once: true
  tags: upgrade_k8s, restart_master

- name: 轮询等待apiserver处于running状态
  shell: "kubectl get pod -n kube-system | grep 'kube-apiserver' | awk '{print $3}'"
  register: pod_status
  until: pod_status.stdout == "Running"
  connection: local
  run_once: true
  retries: 15
  delay: 5
  ignore_errors: true
  tags: upgrade_k8s
  
- name: 设置node节点可以调度pod
  shell: 'kubectl taint nodes --all node-role.kubernetes.io/master-'
  when: DEPLOY_MODE == "allinone" or  DEPLOY_MODE == "multi-master" 
  connection: local
  run_once: true  

- name: 修改kubernetes的端口范围
  shell: "grep service-node-port-range /etc/kubernetes/manifests/kube-apiserver.yaml >> /dev/null; \
          if [ $? -ne 0 ]; \
          then sed -i \"s#--allow-privileged=true#--allow-privileged=true\\n    - --service-node-port-range=1-65535#g\" /etc/kubernetes/manifests/kube-apiserver.yaml; \
          fi;"
  connection: local
  run_once: true
  tags: upgrade_k8s

- name: 重置端口后,轮询等待apiserver处于running状态
  shell: "kubectl get pod -n kube-system | grep 'kube-apiserver' | awk '{print $3}'"
  register: pod_status
  until: pod_status.stdout == "Running"
  connection: local
  run_once: true
  retries: 15
  delay: 5
  ignore_errors: true
  tags: upgrade_k8s


# 支持kubectl命令自动补全
- name: 支持kubectl命令自动补全
  shell: 'kubectl completion bash >/etc/bash_completion.d/kubectl'

- name: 配置db端口挂载清理任务
  shell: "chmod +777 /opt/kad/tools/db-port-clean.sh && touch /var/spool/cron/root && sed -i '/db-port-clean.sh/d' /var/spool/cron/root && echo '40 2 * * *  sh /opt/kad/tools/db-port-clean.sh' >> /var/spool/cron/root"
  connection: local
  run_once: true
  tags: restart_master 

# 如果node节点也包括在master节点中,设置该节点可以调度pod
